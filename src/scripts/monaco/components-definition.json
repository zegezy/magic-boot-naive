{
  "naive": {
    "n-affix": {
      "description": "Affix can make content stick to fixed places when scrolling. It's similar to `position: sticky` but can do more things.",
      "props": {
        "listen-to": {
          "type": "string | HTMLElement | Document | Window | (() => HTMLElement)",
          "description": "The scrolling element to listen scrolling."
        },
        "top": {
          "type": "number",
          "description": "The css top property after trigger top affix. (if not set, use `trigger-top` prop)"
        },
        "bottom": {
          "type": "number",
          "description": "The css bottom property after trigger bottom affix. (if not set, use `trigger-bottom` prop)"
        },
        "trigger-top": {
          "type": "number",
          "description": "The distance px to top of target to trigger top affix. (if not set, use `top` prop)"
        },
        "trigger-bottom": {
          "type": "number",
          "description": "The distance px to bottom of target to trigger bottom affix. (if not set, use `bottom` prop)"
        },
        "position": {
          "type": "'fixed' | 'absolute'",
          "description": "CSS position of the affix."
        },
        "offset-top": {
          "type": "number"
        },
        "offset-bottom": {
          "type": "number"
        },
        "target": {
          "type": "Function"
        }
      },
      "events": {}
    },
    "n-alert": {
      "description": "According to my experience, the most frequent usage of it may be requesting for disabling AdBlocks.",
      "props": {
        "title": {
          "type": "string",
          "description": "Title of the alert."
        },
        "show-icon": {
          "type": "boolean",
          "description": "Whether to show the icon of alert."
        },
        "type": {
          "type": "'default' | 'info' | 'success' | 'warning' | 'error'",
          "description": "Alert type."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether the alert can show border."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether the alert can be closed."
        }
      },
      "events": {}
    },
    "n-anchor": {
      "description": "<!--single-column-->\n\nTell you where you are.",
      "props": {
        "affix": {
          "type": "boolean",
          "description": "If it works like an affix. If set to `true`, it will receive props from [affix](affix#Affix-Props)."
        },
        "listen-to": {
          "type": "string | object | Function"
        },
        "top": {
          "type": "number"
        },
        "bottom": {
          "type": "number"
        },
        "trigger-top": {
          "type": "number"
        },
        "trigger-bottom": {
          "type": "number"
        },
        "position": {
          "type": "string"
        },
        "offset-top": {
          "type": "number"
        },
        "offset-bottom": {
          "type": "number"
        },
        "target": {
          "type": "Function"
        },
        "type": {
          "type": "'rail' | 'block'",
          "description": "The type to use."
        },
        "show-rail": {
          "type": "boolean",
          "description": "Whether to show the sider rail."
        },
        "show-background": {
          "type": "boolean",
          "description": "Whether to show background of links."
        },
        "bound": {
          "type": "number",
          "description": "The height of the border when scrolling."
        },
        "ignore-gap": {
          "type": "boolean",
          "description": "If set to `true`, it will be displayed on the exact href."
        },
        "offset-target": {
          "type": "string | HTMLElement | Window | Document | (() => HTMLElement)",
          "description": "The element or selector used to calc offset of link elements. If you are not scrolling the entire document but only a part of it, you may need to set this."
        }
      },
      "events": {}
    },
    "n-anchor-link": {
      "props": {
        "title": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-auto-complete": {
      "description": "Offer a search hint or maybe guess some likely options?",
      "props": {
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "menu-props": {
          "type": "HTMLAttributes",
          "description": "The menu's dom props."
        },
        "append": {
          "type": "boolean",
          "description": "Whether to append content to input."
        },
        "bordered": {
          "type": "boolean"
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether autocomplete is clearable."
        },
        "default-value": {
          "type": "string",
          "description": "Default value of autocomplete."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether to show a loading status."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the autocomplete is disabled."
        },
        "placeholder": {
          "type": "string",
          "description": "Autocomplete's placeholder."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Autocomplete's placement."
        },
        "value": {
          "type": "string",
          "description": "Input of autocomplete."
        },
        "blur-after-select": {
          "type": "boolean",
          "description": "Whether to blur after selection."
        },
        "clear-after-select": {
          "type": "boolean",
          "description": "Whether to clear after selection."
        },
        "get-show": {
          "type": "(value: string) => boolean",
          "description": "Use the input to determine whether to show options on focus."
        },
        "show-empty": {
          "type": "boolean",
          "description": "Whether to show menu if there's no option."
        },
        "input-props": {
          "type": "HTMLInputAttributes",
          "description": "The attributes of input element in autocomplete."
        },
        "render-option": {
          "type": "(info: { node: VNode, option: SelectOption | SelectGroupOption, selected: boolean }) => VNodeChild",
          "description": "Render function for each option."
        },
        "render-label": {
          "type": "(option: SelectOption | SelectGroupOption, selected: boolean) => VNodeChild",
          "description": "Render function for each option label."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Autocomplete size."
        },
        "options": {
          "type": "Array<string | AutoCompleteOption | AutoCompleteGroupOption>",
          "description": "Options to autocomplete from."
        },
        "z-index": {
          "type": "number"
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        }
      },
      "events": {}
    },
    "n-avatar": {
      "description": "On the Internet, nobody knows you're a dog.",
      "props": {
        "size": {
          "type": "'small' | 'medium' | 'large' | number",
          "description": "Avatar's size."
        },
        "src": {
          "type": "string",
          "description": "Avatar's image source."
        },
        "circle": {
          "type": "boolean"
        },
        "object-fit": {
          "type": "'fill' | 'contain' | 'cover' | 'none' | 'scale-down'",
          "description": "Object-fit type of the image in the container."
        },
        "round": {
          "type": "boolean",
          "description": "Whether to display a rounded avatar."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to display a avatar with border."
        },
        "fallback-src": {
          "type": "string",
          "description": "Image URL to show when avatar fails to load."
        },
        "intersection-observer-options": {
          "type": "{ root?: Element | Document | string | null, rootMargin?: string, threshold?: number | number[]; }",
          "description": "Intersection observer's config to be applied when `lazy=true`."
        },
        "lazy": {
          "type": "boolean",
          "description": "Load image after it enters viewport. When used alone, it will be assigned the property value of [HTMLImageElement.loading](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading). Alternatively, it can be used in conjunction with the `intersection-observer-options` configuration to achieve lazy loading."
        },
        "render-placeholder": {
          "type": "() => VNodeChild",
          "description": "Render function of placeholder."
        },
        "render-fallback": {
          "type": "() => VNodeChild",
          "description": "Render function of fallback content."
        },
        "img-props": {
          "type": "object",
          "description": "The props of the img element inside the component."
        },
        "color": {
          "type": "string",
          "description": "The background color of the avatar."
        }
      },
      "events": {}
    },
    "n-avatar-group": {
      "props": {
        "max": {
          "type": "number",
          "description": "Max avatar count in the group."
        },
        "max-style": {
          "type": "Object | string",
          "description": "The style of the overflow placeholder."
        },
        "options": {
          "type": "Array<AvatarOption>",
          "description": "Avatar group options."
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether display a vertical avatar group."
        },
        "expand-on-hover": {
          "type": "boolean",
          "description": "Expand on hover."
        },
        "size": {
          "type": "string | number"
        }
      },
      "events": {}
    },
    "n-back-top": {
      "props": {
        "show": {
          "type": "boolean",
          "description": "Whether to show BackTop"
        },
        "right": {
          "type": "number | string",
          "description": "The width of BackTop from the right side of the page"
        },
        "bottom": {
          "type": "number | string",
          "description": "The height of BackTop from the bottom of the page"
        },
        "to": {
          "type": "string | HTMLElement",
          "description": "Container node to show BackTop"
        },
        "visibility-height": {
          "type": "number",
          "description": "BackTop's trigger scroll top."
        },
        "listen-to": {
          "type": "string | HTMLElement",
          "description": "The element to be listened to scroll event. If it is `undefined` back top will listen to the nearest scrollable parent."
        },
        "target": {
          "type": "Function"
        }
      },
      "events": {}
    },
    "n-badge": {
      "description": "I bet you have seen it and know how it should be applied.",
      "props": {
        "value": {
          "type": "string | number",
          "description": "Badge's value."
        },
        "max": {
          "type": "number",
          "description": "The maximum number of the badge when its value overflows."
        },
        "dot": {
          "type": "boolean",
          "description": "Show badge as dot."
        },
        "type": {
          "type": "'default' | 'success' | 'error' | 'warning' | 'info'",
          "description": "Type of the badge."
        },
        "show": {
          "type": "boolean",
          "description": "Whether the badge should be shown altogether."
        },
        "show-zero": {
          "type": "boolean",
          "description": "Whether to display the badge, even if provided value equals 0."
        },
        "processing": {
          "type": "boolean",
          "description": "Show processing status."
        },
        "color": {
          "type": "string",
          "description": "Badge color."
        },
        "offset": {
          "type": "[string | number, string | number]",
          "description": "Offset of the badge from the left and top of the default position."
        }
      },
      "events": {}
    },
    "n-breadcrumb": {
      "description": "It doesn't look like what it calls.",
      "props": {
        "separator": {
          "type": "string",
          "description": "Breadcrumb separator."
        }
      },
      "events": {}
    },
    "n-breadcrumb-item": {
      "props": {
        "separator": {
          "type": "string",
          "description": "BreadcrumbItem separator."
        },
        "href": {
          "type": "string",
          "description": "BreadcrumbItem link."
        },
        "clickable": {
          "type": "boolean",
          "description": "Whether it's clickable."
        }
      },
      "events": {}
    },
    "n-button": {
      "description": "Button is used to trigger some actions.",
      "props": {
        "color": {
          "type": "string",
          "description": "Button color (support `#FFF`, `#FFFFFF`, `yellow`,`rgb(0, 0, 0)` formatted colors)."
        },
        "text-color": {
          "type": "string",
          "description": "Button text color (support `#FFF`, `#FFFFFF`, `yellow`,`rgb(0, 0, 0)` formatted colors)."
        },
        "text": {
          "type": "boolean",
          "description": "Whether to display as a text button."
        },
        "block": {
          "type": "boolean",
          "description": "Whether the button is displayed as block."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether the button shows the loading status."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the button is disabled."
        },
        "circle": {
          "type": "boolean",
          "description": "Whether the button is round."
        },
        "size": {
          "type": "'tiny' | 'small' | 'medium' | 'large'",
          "description": "Button size."
        },
        "ghost": {
          "type": "boolean",
          "description": "Whether the button is ghost."
        },
        "round": {
          "type": "boolean",
          "description": "Whether the button shows rounded corners."
        },
        "secondary": {
          "type": "boolean",
          "description": "Whether the button is secondary button."
        },
        "tertiary": {
          "type": "boolean",
          "description": "Whether the button is tertiary button."
        },
        "quaternary": {
          "type": "boolean",
          "description": "Whether the button is quaternary button."
        },
        "strong": {
          "type": "boolean",
          "description": "Whether to use strong text in the button."
        },
        "focusable": {
          "type": "boolean",
          "description": "Whether the button is focusable."
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether is supports keyboard operation."
        },
        "tag": {
          "type": "string",
          "description": "What tag need the button be rendered as."
        },
        "type": {
          "type": "'default' | 'tertiary' | 'primary' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Button type."
        },
        "dashed": {
          "type": "boolean",
          "description": "Whether the button's border is a dashed line."
        },
        "render-icon": {
          "type": "() => VNodeChild",
          "description": "Render function that renders button icon."
        },
        "icon-placement": {
          "type": "'left' | 'right'",
          "description": "The position of the icon in the button."
        },
        "attr-type": {
          "type": "'button' | 'submit' | 'reset'",
          "description": "The `type` attribute of the button's DOM."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether the button shows the border."
        },
        "native-focus-behavior": {
          "type": "boolean",
          "description": "Whether to follow button's native focus behavior. Since safari's button can't be focused by click, naive-ui uses some tricks to make it focusable on safari. If you don't need the behavior or need the button to be draggable, you can enable the prop."
        }
      },
      "events": {}
    },
    "n-button-group": {
      "props": {
        "size": {
          "type": "'tiny' | 'small' | 'medium' | 'large'",
          "description": "The buttons' size in button group. If set, the button's size prop inner group won't work."
        },
        "vertical": {
          "type": "boolean",
          "description": "Directions of buttons in the group."
        }
      },
      "events": {}
    },
    "n-calendar": {
      "description": "How time flies.",
      "props": {
        "is-date-disabled": {
          "type": "(timestamp: number) => boolean",
          "description": "Validator of the date."
        },
        "value": {
          "type": "number | null",
          "description": "Selected date's timestamp."
        },
        "default-value": {
          "type": "number",
          "description": "Default selected date's timestamp."
        }
      },
      "events": {}
    },
    "n-color-picker": {
      "props": {
        "value": {
          "type": "string | null",
          "description": "Value of the picker."
        },
        "show": {
          "type": "boolean",
          "description": "Whether the color panel is shown."
        },
        "default-show": {
          "type": "boolean",
          "description": "Whether to show the color panel by default."
        },
        "default-value": {
          "type": "string",
          "description": "Default value of the picker."
        },
        "modes": {
          "type": "Array<'rgb' | 'hex' | 'hsl' | 'hsv'>",
          "description": "The value format of the picker. Notice that value will follow the mode once you select a new value from the picker."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Color panel placement."
        },
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Where to attach the panel to. `false` will keep it not detached."
        },
        "show-alpha": {
          "type": "boolean",
          "description": "Whether the alpha channel can be adjusted."
        },
        "show-preview": {
          "type": "boolean",
          "description": "Whether the color preview is shown."
        },
        "swatches": {
          "type": "string[]",
          "description": "Value of the swatches."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the color picker."
        },
        "actions": {
          "type": "Array<'confirm' | 'clear'> | null",
          "description": "The types of buttons to be shown in the panel."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of the picker."
        },
        "render-label": {
          "type": "(color: string | null) => VNodeChild",
          "description": "Label render function of the color picker trigger."
        }
      },
      "events": {}
    },
    "n-card": {
      "description": "Just put something in it.",
      "props": {
        "title": {
          "type": "string",
          "description": "Card title."
        },
        "content-class": {
          "type": "string",
          "description": "The class of the card content area."
        },
        "content-style": {
          "type": "Object | string",
          "description": "The style of the card content area."
        },
        "header-class": {
          "type": "string",
          "description": "The class of the card head area."
        },
        "header-style": {
          "type": "Object | string",
          "description": "The style of the card head area."
        },
        "header-extra-class": {
          "type": "string",
          "description": "The class of the card head extra area."
        },
        "header-extra-style": {
          "type": "Object | string",
          "description": "The style of the card head extra area."
        },
        "footer-class": {
          "type": "string",
          "description": "The class of the bottom area of the card."
        },
        "footer-style": {
          "type": "Object | string",
          "description": "The style of the bottom area of the card."
        },
        "embedded": {
          "type": "boolean",
          "description": "Use a darker background color to show the embedding effect (only for bright themes)"
        },
        "segmented": {
          "type": "boolean | { [part in 'content' | 'footer' | 'action']?: boolean | 'soft' }",
          "description": "Segment divider settings of the card."
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | 'huge'",
          "description": "Card size."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to show the card border."
        },
        "closable": {
          "type": "boolean",
          "description": "Is it allowed to close."
        },
        "hoverable": {
          "type": "boolean",
          "description": "Whether to show shadow when hovering on the card."
        },
        "role": {
          "type": "string"
        },
        "tag": {
          "type": "string",
          "description": "What tag need the card be rendered as."
        }
      },
      "events": {}
    },
    "n-carousel": {
      "description": "It's usually used to display good news.",
      "props": {
        "default-index": {
          "type": "number",
          "description": "default index."
        },
        "current-index": {
          "type": "number",
          "description": "current index."
        },
        "show-arrow": {
          "type": "boolean",
          "description": "Whether to show arrow buttons."
        },
        "dot-type": {
          "type": "'dot' | 'line'",
          "description": "Dot style."
        },
        "dot-placement": {
          "type": "'top' | 'bottom' | 'left' | 'right'",
          "description": "Dot placement in the panel."
        },
        "slides-per-view": {
          "type": "'auto' | number",
          "description": "Number of carousels displayed on per view."
        },
        "space-between": {
          "type": "number",
          "description": "The spacing between the carousels."
        },
        "centered-slides": {
          "type": "boolean",
          "description": "Whether to center the current view carousel."
        },
        "direction": {
          "type": "'horizontal' | 'vertical'",
          "description": "Carousel shows the direction."
        },
        "autoplay": {
          "type": "boolean",
          "description": "Whether to scroll automatically."
        },
        "interval": {
          "type": "number",
          "description": "Auto play interval (ms)."
        },
        "loop": {
          "type": "boolean",
          "description": "Whether to loop."
        },
        "effect": {
          "type": "'slide' | 'fade' | 'card' | 'custom'",
          "description": "Transition effect when switching between carousel."
        },
        "show-dots": {
          "type": "boolean",
          "description": "Whether to show dots."
        },
        "trigger": {
          "type": "'click' | 'hover'",
          "description": "The method of manual switching."
        },
        "transition-style": {
          "type": "{ transitionDuration?: string, transitionTimingFunction?: string }",
          "description": "The style of the transition effect."
        },
        "transition-props": {
          "type": "TransitionProps",
          "description": "Custom transition effect properties, [reference](https://v3.vuejs.org/api/built-in-components.html#transition)."
        },
        "draggable": {
          "type": "boolean",
          "description": "Whether to switch the carousel by dragging the mouse."
        },
        "prev-slide-style": {
          "type": "object | string",
          "description": "Previous slide's style."
        },
        "next-slide-style": {
          "type": "object | string",
          "description": "Next slide's style."
        },
        "touchable": {
          "type": "boolean",
          "description": "Whether to switch the carousel by touch."
        },
        "mousewheel": {
          "type": "boolean",
          "description": "Whether to switch the carousel through the mouse wheel."
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether to switch the carousel by pressing the key, it only works when the focus is on Dots."
        }
      },
      "events": {}
    },
    "n-carousel-item": {
      "props": {},
      "events": {}
    },
    "n-cascader": {
      "description": "Cascader can be used to display and select tree structured data.",
      "props": {
        "allow-checking-not-loaded": {
          "type": "boolean",
          "description": "Whether to allow cascade checking on not loaded nodes. If you want to use this, you should know the `value` may be incomplete. Also, you should aware about the consistency bewteen naive's checking logic and your backend's checking logic, especially when there are disabled nodes."
        },
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "bordered": {
          "type": "boolean"
        },
        "options": {
          "type": "CascaderOption[]",
          "description": "Options of the cascader."
        },
        "value": {
          "type": "string | number | Array<number | string> | null",
          "description": "Value of the cascader (if being set manually)."
        },
        "default-value": {
          "type": "string | number | Array<number | string> | null",
          "description": "Data selected by default if no value is set."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder text."
        },
        "multiple": {
          "type": "boolean",
          "description": "Whether to allow multiple options being selected."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Cascader size."
        },
        "filterable": {
          "type": "boolean",
          "description": "Note: If `remote` is set, this won't have any effect."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the cascader."
        },
        "disabled-field": {
          "type": "string",
          "description": "The disabled field in `CascaderOption`."
        },
        "expand-trigger": {
          "type": "'click' | 'hover'",
          "description": "If `remote` is set, `'hover'` won't work."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the cascader is clearable."
        },
        "clear-filter-after-select": {
          "type": "boolean",
          "description": "When multiple and filter is true, whether to clear filter keyword after select an option."
        },
        "remote": {
          "type": "boolean",
          "description": "Whether to obtain data remotely."
        },
        "separator": {
          "type": "string",
          "description": "Selected option path value separator (used with `show-path`)."
        },
        "filter": {
          "type": "(pattern: string, option: CascaderOption, path: CascaderOption[]) => boolean",
          "description": "Filter function of the cascader."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Cascader placement."
        },
        "cascade": {
          "type": "boolean",
          "description": "Whether to cascade the checkbox selection onto children."
        },
        "leaf-only": {
          "type": "boolean"
        },
        "show-path": {
          "type": "boolean",
          "description": "Whether to show the selected options as a path."
        },
        "show": {
          "type": "boolean",
          "description": "Whether to show the menu."
        },
        "max-tag-count": {
          "type": "number | 'responsive'",
          "description": "Max tag count in multiple select mode. `responsive` will keep all the tags in single line."
        },
        "ellipsis-tag-popover-props": {
          "type": "PopoverProps",
          "description": "`popover` props of the preview ellipsis tag."
        },
        "menu-props": {
          "type": "HTMLAttributes",
          "description": "The menu's dom props."
        },
        "filter-menu-props": {
          "type": "HTMLAttributes",
          "description": "The filter menu's dom props."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to enable virtual scrolling."
        },
        "check-strategy": {
          "type": "string",
          "description": "The way to show checked options. `all` means showing all checked node. `parent` means showing all checked parent node when all child node are checked (not working in single select mode). `child` means showing all child node."
        },
        "value-field": {
          "type": "string",
          "description": "The value field in `CascaderOption`."
        },
        "label-field": {
          "type": "string",
          "description": "The label field in `CascaderOption`."
        },
        "children-field": {
          "type": "string",
          "description": "The children field in `CascaderOption`."
        },
        "render-label": {
          "type": "(option: CascaderOption, checked: boolean) => VNodeChild",
          "description": "Render function for cascader menu option label."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        }
      },
      "events": {}
    },
    "n-checkbox": {
      "description": "Yo, yo, check it out.",
      "props": {
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "The size of the checkbox."
        },
        "checked": {
          "type": "boolean",
          "description": "Whether the checkbox is being checked manually."
        },
        "default-checked": {
          "type": "boolean",
          "description": "Whether the checkbox is checked by default."
        },
        "value": {
          "type": "string | number",
          "description": "The value of the checkbox to be used in a checkbox group."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the checkbox is disabled."
        },
        "indeterminate": {
          "type": "boolean",
          "description": "Whether the checkbox can have a third indeterminate state."
        },
        "label": {
          "type": "string",
          "description": "Checkbox label."
        },
        "focusable": {
          "type": "boolean",
          "description": "Whether the checkbox gains focus after being checked."
        },
        "checked-value": {
          "type": "boolean | string | number"
        },
        "unchecked-value": {
          "type": "boolean | string | number"
        },
        "private-inside-table": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-checkbox-group": {
      "props": {
        "min": {
          "type": "number",
          "description": "The minimum number of checkboxes that can be checked."
        },
        "max": {
          "type": "number",
          "description": "The maximum number of checkboxes that can be checked."
        },
        "size": {
          "type": "string"
        },
        "value": {
          "type": "Array<string | number> | null",
          "description": "Manually set values of a checkbox group."
        },
        "default-value": {
          "type": "Array<string | number>",
          "description": "Checkbox group's default selected value."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the checkbox group is disabled."
        }
      },
      "events": {}
    },
    "n-code": {
      "description": "## Prequisites\n\n<n-alert title=\"Note\" type=\"warning\" style=\"margin-bottom: 16px;\" :bordered=\"false\">\n  Due to package size, Naive UI doesn't include highlight.js. If you want to use Code, make sure you have set highlightjs before using it.\n</n-alert>\n\nThe following code shows how to set hljs of Code. Importing highlight.js on demand is recommonded, because it can significantly reduce bundle size of your app.\n\n```html\n<template>\n  <n-config-provider :hljs=\"hljs\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import hljs from 'highlight.js/lib/core'\n  import javascript from 'highlight.js/lib/languages/javascript'\n\n  hljs.registerLanguage('javascript', javascript)\n\n  export default defineComponent({\n    setup() {\n      return {\n        hljs\n      }\n    }\n  })\n</script>\n```",
      "props": {
        "language": {
          "type": "string",
          "description": "Code language in highlightjs."
        },
        "code": {
          "type": "string",
          "description": "Incoming code string."
        },
        "trim": {
          "type": "boolean",
          "description": "Whether to display trimmed code."
        },
        "hljs": {
          "type": "Object",
          "description": "If you want to set hljs locally, pass it using this prop."
        },
        "uri": {
          "type": "boolean"
        },
        "inline": {
          "type": "boolean",
          "description": "Whether the code is displayed as inline."
        },
        "word-wrap": {
          "type": "boolean",
          "description": "Whether to display word-wrapped code."
        },
        "show-line-numbers": {
          "type": "boolean",
          "description": "Whether to show line numbers. Won't work if `inline` or `word-wrap` is `true`."
        }
      },
      "events": {}
    },
    "n-collapse": {
      "description": "I saw it appears in many side control panels.",
      "props": {
        "default-expanded-names": {
          "type": "string | number | Array<string | number> | null",
          "description": "Pre-expanded panels that can still be collapsed. If `accordion` mode is set, it should be a non-array value."
        },
        "expanded-names": {
          "type": "string | number | Array<string | number> | null",
          "description": "Expanded panels that cannot be collapsed. If `accordion` mode is set, it should be a non-array value."
        },
        "arrow-placement": {
          "type": "'left' | 'right'",
          "description": "Arrow placement side of text."
        },
        "accordion": {
          "type": "boolean",
          "description": "Only allow one panel open at a time."
        },
        "display-directive": {
          "type": "'if' | 'show'",
          "description": "The display directive to use when `n-collapse-item` renders content. `'if'` corresponds to `v-if` and `'show'` corresponds to `v-show`."
        },
        "trigger-areas": {
          "type": "Array<'main' | 'arrow' | 'extra'>",
          "description": "Expansion trigger areas. If you don't want to trigger expansion on some areas, you can use the prop."
        }
      },
      "events": {}
    },
    "n-collapse-item": {
      "props": {
        "title": {
          "type": "string",
          "description": "Title."
        },
        "name": {
          "type": "string | number",
          "description": "Item identifier (should be unique)."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the item is disabled."
        },
        "display-directive": {
          "type": "'if' | 'show'",
          "description": "The display directive to use when it is rendering its content. `'if'` corresponds to `v-if` and `'show'` corresponds to `v-show`. When it is set to `undefined` the value will follow its outer `n-collapse`."
        }
      },
      "events": {}
    },
    "n-collapse-transition": {
      "props": {
        "show": {
          "type": "boolean",
          "description": "Whether to show content."
        },
        "appear": {
          "type": "boolean",
          "description": "Whether to play animation on first mounted."
        },
        "collapsed": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-config-provider": {
      "props": {
        "abstract": {
          "type": "boolean",
          "description": "If `n-config-provider` has no wrapper DOM"
        },
        "bordered": {
          "type": "boolean"
        },
        "cls-prefix": {
          "type": "string",
          "description": "The class prefix of all inner components. It's applied in the first time."
        },
        "locale": {
          "type": "Locale | null",
          "description": "The locale object to be consumed by its child. If set to `null` it will use the default `enUS` locale. If set to `undefined` it will inherit its parent `n-config-provider`."
        },
        "date-locale": {
          "type": "DateLocale | null",
          "description": "The date locale object to be consumed by its child. If set to `null` it will use the default `dateEnUS` locale. If set to `undefined` it will inherit its parent `n-config-provider`."
        },
        "namespace": {
          "type": "string",
          "description": "Class name of detached parts of components inside `n-config-provider`"
        },
        "rtl": {
          "type": "Array"
        },
        "tag": {
          "type": "string",
          "description": "What tag `n-config-provider` will be rendered as"
        },
        "hljs": {
          "type": "object"
        },
        "katex": {
          "type": "object",
          "description": "Katex object for `n-equation`."
        },
        "component-options": {
          "type": "object"
        },
        "icons": {
          "type": "object"
        },
        "breakpoints": {
          "type": "{ [k: string]: number }",
          "description": "Responsive breakpoints, it will be used in `n-grid`. The prop is not responsive, you need to set it on its first mount."
        },
        "preflight-style-disabled": {
          "type": "boolean",
          "description": "Whether to disabled preflight style of naive-ui. If you disable it, you can take control of all global css. Also you can use `n-global-style` to apply global style (which is recommend since global style will be reactive)."
        },
        "inline-theme-disabled": {
          "type": "boolean",
          "description": "Whether to disabled inline theme CSS variables. If you won't change theme overrides frequently in client side, and need SSR or make devtools looks clear. You can enable the prop. Note that the prop is not responsive."
        },
        "as": {
          "type": "string"
        },
        "theme": {
          "type": "Theme | null",
          "description": "The theme object to be consumed by its child. If set to `null` it will use the default light theme. If set to `undefined` it will inherit its parent `n-config-provider`. For more details please see [Customizing Theme](../docs/customize-theme)."
        },
        "theme-overrides": {
          "type": "ThemeOverrides | null",
          "description": "The theme vars overrides to be consumed by its child. If set to `null` it will clear all theme vars. If set to `undefined` it will inherit its parent `n-config-provider`. For more details please see [Customizing Theme](../docs/customize-theme)."
        }
      },
      "events": {}
    },
    "n-countdown": {
      "description": "A second is passed after a second has passed.",
      "props": {
        "duration": {
          "type": "number",
          "description": "The duration of the countdown (unit is millisecond). Not reactive."
        },
        "active": {
          "type": "boolean",
          "description": "Whether countdown is active."
        },
        "precision": {
          "type": "0 | 1 | 2 | 3",
          "description": "The precision of the second."
        },
        "render": {
          "type": "(props: { hours: number, minutes: number, seconds: number, milliseconds: number }) => VNodeChild",
          "description": "Time's render function"
        }
      },
      "events": {}
    },
    "n-number-animation": {
      "props": {
        "to": {
          "type": "number",
          "description": "Target value."
        },
        "precision": {
          "type": "number",
          "description": "Decimal precision of the displayed value."
        },
        "show-separator": {
          "type": "boolean",
          "description": "Whether to show separator."
        },
        "locale": {
          "type": "string",
          "description": "Language of the number."
        },
        "from": {
          "type": "number",
          "description": "Start value of the animation"
        },
        "active": {
          "type": "boolean",
          "description": "Whether to play the animation."
        },
        "duration": {
          "type": "number",
          "description": "The duration of"
        }
      },
      "events": {}
    },
    "n-data-table": {
      "props": {
        "pagination": {
          "type": "false | object",
          "description": "See [Pagination props](pagination#Pagination-Props)"
        },
        "paginate-single-page": {
          "type": "boolean",
          "description": "Whether show pagination data is less than one page."
        },
        "min-height": {
          "type": "number | string",
          "description": "The min-height of the table content. Can be a CSS value."
        },
        "max-height": {
          "type": "number | string",
          "description": "The max-height of the table content. Can be a CSS value."
        },
        "columns": {
          "type": "Array<DataTableColumn>",
          "description": "Columns to display."
        },
        "row-class-name": {
          "type": "string | (rowData: object, rowIndex : number) => string",
          "description": "Class name of each row."
        },
        "row-props": {
          "type": "(rowData: object, rowIndex : number) => object",
          "description": "Customize row attributes."
        },
        "row-key": {
          "type": "(rowData: object) => (number | string)",
          "description": "Generate the key of the row by row data (if you don't want to set the key)."
        },
        "summary": {
          "type": "DataTableCreateSummary",
          "description": "Data of table summary row. For types, see <n-a href=\"#DataTableCreateSummary-Type\">DataTableCreateSummary Type</n-a>."
        },
        "data": {
          "type": "Array<object>",
          "description": "Data to display."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether to display loading status."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to show border."
        },
        "bottom-bordered": {
          "type": "boolean",
          "description": "Whether to show bottom border."
        },
        "striped": {
          "type": "boolean",
          "description": "Whether to show zebra stripes on rows."
        },
        "scroll-x": {
          "type": "number | string",
          "description": "If columns are horizontal fixed, scroll-x need to be set."
        },
        "default-checked-row-keys": {
          "type": "Array<string | number>",
          "description": "The key value selected by default."
        },
        "checked-row-keys": {
          "type": "Array<string | number>",
          "description": "The keys of checked rows."
        },
        "single-line": {
          "type": "boolean",
          "description": "Whether columns are not divided. If the prop is `true`, table cell has no `border-right`."
        },
        "single-column": {
          "type": "boolean",
          "description": "Whether rows are not divided. If the prop is `true`, table cell has no `border-bottom`."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Table size."
        },
        "remote": {
          "type": "boolean",
          "description": "If data-table do automatic paging. You may set it to `true` in async usage."
        },
        "default-expanded-row-keys": {
          "type": "Array<string | number>",
          "description": "The key value of the expanded tree data by default"
        },
        "default-expand-all": {
          "type": "boolean",
          "description": "Whether to expand all expandable rows. Can't be used with async expanding data."
        },
        "expanded-row-keys": {
          "type": "Array<string | number>",
          "description": "Expanded row keys."
        },
        "sticky-expanded-rows": {
          "type": "boolean",
          "description": "Expanded row content remains sticky."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to use virtual scroll to deal with large data. Make sure `max-height` is set before using it. When `virtual-scroll` is `true`, `rowSpan` will not take effect."
        },
        "table-layout": {
          "type": "'auto' | 'fixed'",
          "description": "Style `table-layout` of the table. When `ellipsis` or `max-height` or `flex-height` are set, it will always be `'fixed'` regardless of what you set."
        },
        "allow-checking-not-loaded": {
          "type": "boolean",
          "description": "Whether to allow cascade checking on not loaded nodes. If you want to use this, you should know the `check-row-keys` may be incomplete."
        },
        "cascade": {
          "type": "boolean",
          "description": "Whether to do cascade checking when using tree data."
        },
        "children-key": {
          "type": "string",
          "description": "The key of children data in tree data's data entity."
        },
        "indent": {
          "type": "number",
          "description": "Indent of row content when using tree data."
        },
        "flex-height": {
          "type": "boolean",
          "description": "Whether to make table body's height auto fit table area height. Make it enabled will make `table-layout` always set to `'fixed'`."
        },
        "summary-placement": {
          "type": "'top' | 'bottom'",
          "description": "Summary rows placement."
        },
        "pagination-behavior-on-filter": {
          "type": "'first' | 'current'",
          "description": "The behavior of pagination after filter state is changed. `'first'` means returning to first page on filter, `'current'` means keep at current page on filter."
        },
        "scrollbar-props": {
          "type": "object",
          "description": "See [Scrollbar props](scrollbar#Scrollbar-Props), the `on-scroll` attribute already exists in the `DataTable`, the `on-scroll` attribute does not take effect here."
        },
        "render-cell": {
          "type": "(value: any, rowData: object, column: DataTableBaseColumn) => VNodeChild",
          "description": "Render function of cell, it will be overwritten by columns' `render`."
        },
        "render-expand-icon": {
          "type": "({ expanded }: { expanded: boolean }) => VNodeChild",
          "description": "Render function of expand icon."
        },
        "spin-props": {
          "type": "{ strokeWidth?: number, stroke?: string }",
          "description": "Table spin's props."
        }
      },
      "events": {}
    },
    "n-date-picker": {
      "props": {
        "to": {
          "type": "string | object | boolean"
        },
        "bordered": {
          "type": "boolean"
        },
        "clearable": {
          "type": "boolean"
        },
        "update-value-on-close": {
          "type": "boolean"
        },
        "default-value": {
          "type": "number | Array"
        },
        "default-formatted-value": {
          "type": "string | Array"
        },
        "default-time": {
          "type": "number | string | Array"
        },
        "disabled": {
          "type": "boolean"
        },
        "placement": {
          "type": "string"
        },
        "value": {
          "type": "number | Array"
        },
        "formatted-value": {
          "type": "string | Array"
        },
        "size": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value-format": {
          "type": "string"
        },
        "separator": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "start-placeholder": {
          "type": "string"
        },
        "end-placeholder": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "date-format": {
          "type": "string"
        },
        "time-format": {
          "type": "string"
        },
        "actions": {
          "type": "Array"
        },
        "shortcuts": {
          "type": "object"
        },
        "is-date-disabled": {
          "type": "Function"
        },
        "is-time-disabled": {
          "type": "Function"
        },
        "show": {
          "type": "boolean"
        },
        "panel": {
          "type": "boolean"
        },
        "ranges": {
          "type": "object"
        },
        "first-day-of-week": {
          "type": "number"
        },
        "input-readonly": {
          "type": "boolean"
        },
        "close-on-select": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "time-picker-props": {
          "type": "object | Array"
        },
        "default-calendar-start-time": {
          "type": "number"
        },
        "default-calendar-end-time": {
          "type": "number"
        },
        "bind-calendar-months": {
          "type": "boolean"
        },
        "month-format": {
          "type": "string"
        },
        "year-format": {
          "type": "string"
        },
        "quarter-format": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-descriptions": {
      "description": "<!--single-column-->\n\nDisplay items of content easily.",
      "props": {
        "title": {
          "type": "string",
          "description": "Title of the description."
        },
        "column": {
          "type": "number",
          "description": "Total columns."
        },
        "columns": {
          "type": "number"
        },
        "label-placement": {
          "type": "'top' | 'left'",
          "description": "Label placement."
        },
        "label-align": {
          "type": "'center' | 'left' | 'right'",
          "description": "Label align."
        },
        "separator": {
          "type": "string",
          "description": "Separator, only work when `label-placement` is `left` and 　`bordered` is `false`."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of the description."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to display border."
        },
        "label-class": {
          "type": "string",
          "description": "Class of the item label."
        },
        "label-style": {
          "type": "Object | string",
          "description": "Style of the item label."
        },
        "content-class": {
          "type": "string",
          "description": "Class of the item content."
        },
        "content-style": {
          "type": "Object | string",
          "description": "Style of the item content."
        }
      },
      "events": {}
    },
    "n-descriptions-item": {
      "props": {
        "label": {
          "type": "string"
        },
        "span": {
          "type": "number"
        },
        "label-class": {
          "type": "string"
        },
        "label-style": {
          "type": "object | string"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        }
      },
      "events": {}
    },
    "n-dialog": {
      "description": "Before taking action, please confirm.\n\n<n-alert title=\"Prerequisite\" type=\"warning\" :bordered=\"false\">\n  If you want to use dialog, you need to wrap the component where you call related methods inside <n-text code>n-dialog-provider</n-text> and use <n-text code>useDialog</n-text> to get the API.\n</n-alert>\n\nFor example:\n\n```html\n<!-- App.vue -->\n<n-dialog-provider>\n  <content />\n</n-dialog-provider>\n```\n\n```js\nimport { defineComponent } from 'vue'\nimport { useDialog } from 'naive-ui'\n\n// content\nexport default defineComponent({\n  setup () {\n    const dialog = useDialog()\n    return {\n      warning () {\n        dialog.warning(options)\n      }\n    }\n  }\n})\n```",
      "props": {
        "icon": {
          "type": "() => VNodeChild",
          "description": "`Render` function of icon."
        },
        "type": {
          "type": "'error | 'success' | 'warning' | 'info'",
          "description": "Dialog type."
        },
        "title": {
          "type": "string | (() => VNodeChild)",
          "description": "Title, can be a `render` function."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether to show `close` icon."
        },
        "negative-text": {
          "type": "string",
          "description": "Corresponding button won't show if not set."
        },
        "positive-text": {
          "type": "string",
          "description": "Corresponding button won't show if not set."
        },
        "positive-button-props": {
          "type": "ButtonProps",
          "description": "Confirm button's DOM props"
        },
        "negative-button-props": {
          "type": "ButtonProps",
          "description": "Cancel button's DOM props"
        },
        "content": {
          "type": "string | (() => VNodeChild)",
          "description": "Can be a `render` function."
        },
        "action": {
          "type": "Function"
        },
        "show-icon": {
          "type": "boolean",
          "description": "Whether to display the `icon`."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether to display `loading` status."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to show `border`."
        },
        "icon-placement": {
          "type": "'left' | 'top'",
          "description": "Icon placement."
        }
      },
      "events": {}
    },
    "n-dialog-provider": {
      "props": {
        "injection-key": {
          "type": "string"
        },
        "to": {
          "type": "string | object"
        }
      },
      "events": {}
    },
    "n-divider": {
      "description": "Divide something.",
      "props": {
        "title-placement": {
          "type": "'left' | 'right' | 'center'",
          "description": "Title placement."
        },
        "dashed": {
          "type": "boolean",
          "description": "Whether to show dashed line."
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether to show vertical direction."
        }
      },
      "events": {}
    },
    "n-drawer": {
      "description": "I think it is similar with modal, with a bit difference on placement.\n\n<n-alert title=\"Caveat\" type=\"warning\" :bordered=\"false\">\n  If you need to use <n-text code>n-drawer-content</n-text>, you should keep <n-text code>n-drawer</n-text>'s <n-text code>native-scrollbar</n-text> prop as <n-text code>true</n-text>.\n</n-alert>",
      "props": {
        "show": {
          "type": "boolean",
          "description": "Whether to show drawer."
        },
        "width": {
          "type": "number | string",
          "description": "Works when placement is `left` and `right`."
        },
        "height": {
          "type": "number | string",
          "description": "Works when placement is `top` and `bottom`."
        },
        "placement": {
          "type": "string",
          "description": "Drawer placement."
        },
        "mask-closable": {
          "type": "boolean",
          "description": "Whether to emit `hide` event when click mask."
        },
        "show-mask": {
          "type": "boolean | string",
          "description": "Whether to show mask. If set to `'transparent'`, transparent mask would be shown. If set to false, `trap-focus` will be disabled."
        },
        "to": {
          "type": "string | object",
          "description": "Container node of the drawer."
        },
        "display-directive": {
          "type": "string",
          "description": "The display directive to use when `n-drawer` is rendered. `'if'` corresponds to `v-if` and `'show'` corresponds to `v-show`."
        },
        "native-scrollbar": {
          "type": "boolean",
          "description": "Whether to use native scrollbar on drawer."
        },
        "z-index": {
          "type": "number",
          "description": "Z index of the drawer."
        },
        "scrollbar-props": {
          "type": "object",
          "description": "See [Scrollbar props](scrollbar#Scrollbar-Props)."
        },
        "content-class": {
          "type": "string",
          "description": "Class of drawer's scrollable content node."
        },
        "content-style": {
          "type": "object | string",
          "description": "Style of drawer's scrollable content node."
        },
        "trap-focus": {
          "type": "boolean",
          "description": "Whether to trap focus inside drawer."
        },
        "auto-focus": {
          "type": "boolean",
          "description": "Whether to focus the first focusable element inside drawer."
        },
        "close-on-esc": {
          "type": "boolean",
          "description": "Whether to close drawer on Esc is pressed."
        },
        "block-scroll": {
          "type": "boolean",
          "description": "Whether to disabled body scrolling when it's active."
        },
        "max-width": {
          "type": "number",
          "description": "Max width of draggable drawer."
        },
        "max-height": {
          "type": "number",
          "description": "Max height of draggable drawer."
        },
        "min-width": {
          "type": "number",
          "description": "Min width of draggable drawer."
        },
        "min-height": {
          "type": "number",
          "description": "Max height of draggable drawer."
        },
        "resizable": {
          "type": "boolean",
          "description": "Whether to resize the width / height of drawer."
        },
        "default-width": {
          "type": "number | string",
          "description": "Default width of the drawer, works when placement is `left` and `right`."
        },
        "default-height": {
          "type": "number | string",
          "description": "Default height of the drawer, works when placement is `top` and `bottom`."
        },
        "drawer-style": {
          "type": "string | object"
        },
        "drawer-class": {
          "type": "string"
        },
        "target": {}
      },
      "events": {}
    },
    "n-drawer-content": {
      "props": {
        "title": {
          "type": "string",
          "description": "Drawer content title."
        },
        "header-class": {
          "type": "string",
          "description": "Drawer content's header class."
        },
        "header-style": {
          "type": "object | string",
          "description": "Drawer content's header style."
        },
        "footer-class": {
          "type": "string",
          "description": "Drawer content's footer class."
        },
        "footer-style": {
          "type": "object | string",
          "description": "Drawer content's footer style."
        },
        "body-class": {
          "type": "string",
          "description": "Drawer content's body class."
        },
        "body-style": {
          "type": "object | string",
          "description": "Drawer content's body style."
        },
        "body-content-class": {
          "type": "string",
          "description": "Class of body's scrollable content node."
        },
        "body-content-style": {
          "type": "object | string",
          "description": "Style of body's scrollable content node."
        },
        "native-scrollbar": {
          "type": "boolean",
          "description": "Whether to use native scrollbar on body part."
        },
        "scrollbar-props": {
          "type": "object",
          "description": "See [Scrollbar props](scrollbar#Scrollbar-Props)"
        },
        "closable": {
          "type": "boolean",
          "description": "Whether the drawer content is closable."
        }
      },
      "events": {}
    },
    "n-dropdown": {
      "description": "When you have some functions to trigger.",
      "props": {
        "show": {
          "type": "boolean"
        },
        "default-show": {
          "type": "boolean"
        },
        "show-arrow": {
          "type": "boolean"
        },
        "trigger": {
          "type": "string"
        },
        "delay": {
          "type": "number"
        },
        "duration": {
          "type": "number"
        },
        "raw": {
          "type": "boolean"
        },
        "placement": {
          "type": "string"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "arrow-point-to-center": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "get-disabled": {
          "type": "Function"
        },
        "display-directive": {
          "type": "string"
        },
        "arrow-class": {
          "type": "string"
        },
        "arrow-style": {
          "type": "string | object"
        },
        "arrow-wrapper-class": {
          "type": "string"
        },
        "arrow-wrapper-style": {
          "type": "string | object"
        },
        "flip": {
          "type": "boolean"
        },
        "animated": {
          "type": "boolean",
          "description": "Use an animation when showing options."
        },
        "width": {
          "type": "number | string"
        },
        "overlap": {
          "type": "boolean"
        },
        "keep-alive-on-hover": {
          "type": "boolean"
        },
        "z-index": {
          "type": "number"
        },
        "to": {
          "type": "string | object | boolean"
        },
        "scrollable": {
          "type": "boolean"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        },
        "header-class": {
          "type": "string"
        },
        "header-style": {
          "type": "object | string"
        },
        "footer-class": {
          "type": "string"
        },
        "footer-style": {
          "type": "object | string"
        },
        "arrow": {
          "type": "boolean"
        },
        "min-width": {
          "type": "number"
        },
        "max-width": {
          "type": "number"
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether the component supports keyboard operation. (Be careful about the potential conflicts with other components keyboard operations)"
        },
        "size": {
          "type": "'small'|'medium'|'large'|'huge'",
          "description": "Dropdown size."
        },
        "inverted": {
          "type": "boolean",
          "description": "Use the inverted style."
        },
        "options": {
          "type": "Array<DropdownOption | DropdownGroupOption | DropdownDividerOption | DropdownRenderOption>",
          "description": "Dropdown options."
        },
        "menu-props": {
          "type": "(option: DropdownOption | undefined, options: (DropdownOption | DropdownGroupOption)[]) => HTMLAttributes",
          "description": "Menu HTML attributes generator."
        },
        "render-label": {
          "type": "(option: DropdownOption) => VNodeChild",
          "description": "Render function that renders option labels."
        },
        "render-icon": {
          "type": "(option: DropdownOption) => VNodeChild",
          "description": "Render function that renders option icons."
        },
        "render-option": {
          "type": "(props: { node: VNode, option: DropdownOption | DropdownGroupOption }) => VNodeChild",
          "description": "Render function that renders option itself."
        },
        "node-props": {
          "type": "(option: DropdownOption | DropdownGroupOption) => HTMLAttributes",
          "description": "Option HTML attributes generator."
        },
        "label-field": {
          "type": "string",
          "description": "Field name of label."
        },
        "key-field": {
          "type": "string",
          "description": "Field name of key."
        },
        "children-field": {
          "type": "string",
          "description": "Field name of children."
        },
        "value": {
          "type": "string | number"
        }
      },
      "events": {}
    },
    "n-dynamic-input": {
      "props": {
        "max": {
          "type": "number",
          "description": "Maximum number of items."
        },
        "min": {
          "type": "number",
          "description": "Minimum number of items."
        },
        "value": {
          "type": "unknown[]",
          "description": "Value in controlled mode."
        },
        "default-value": {
          "type": "unknown[]",
          "description": "Default value."
        },
        "preset": {
          "type": "'input' | 'pair'",
          "description": "The preset of `n-dynamic-input`, it work when `$slots.default` is not set."
        },
        "key-field": {
          "type": "string",
          "description": "The key of each item that should be used in the rendering of the list."
        },
        "item-class": {
          "type": "string",
          "description": "The class of each item of the dynamic input."
        },
        "item-style": {
          "type": "string | Object",
          "description": "The style of each item of the dynamic input."
        },
        "key-placeholder": {
          "type": "string"
        },
        "value-placeholder": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the dynamic-input. It won't work for custom content."
        },
        "show-sort-button": {
          "type": "boolean",
          "description": "Whether to show sort button."
        },
        "create-button-props": {
          "type": "ButtonProps",
          "description": "Props of create item button."
        }
      },
      "events": {}
    },
    "n-dynamic-tags": {
      "props": {
        "color": {
          "type": "{ color?: string, borderColor?: string, textColor?: string }",
          "description": "Color of the tag. Note: it will override the color set by `type`."
        },
        "type": {
          "type": "'default' | 'primary' | 'info' | 'success' | 'warning' | 'error'",
          "description": "Type of the tag."
        },
        "round": {
          "type": "boolean",
          "description": "Whether the tag has rounded corners."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of the tag."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether the tag is closable."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the tag is disabled."
        },
        "default-value": {
          "type": "string[]",
          "description": "Default value."
        },
        "value": {
          "type": "string[]",
          "description": "Value if manually set."
        },
        "input-class": {
          "type": "string",
          "description": "Customize the class of the input."
        },
        "input-style": {
          "type": "string | Object",
          "description": "Customize the style of the input."
        },
        "input-props": {
          "type": "InputProps",
          "description": "Props of internal `n-input`."
        },
        "max": {
          "type": "number",
          "description": "Maximum number of tags."
        },
        "tag-class": {
          "type": "string",
          "description": "Customize the class of the tag."
        },
        "tag-style": {
          "type": "string | Object",
          "description": "Customize the style of the tag."
        },
        "render-tag": {
          "type": "((tag: string, index: number) => VNodeChild) | ((tag: { label: string, value: string }, index: number) => VNodeChild)",
          "description": "custom render tag."
        }
      },
      "events": {}
    },
    "n-element": {
      "description": "Element has many theme variables provided by Naive UI.",
      "props": {
        "tag": {
          "type": "string",
          "description": "The tag `n-element` should be rendered as."
        }
      },
      "events": {}
    },
    "n-el": {
      "description": "Element has many theme variables provided by Naive UI.",
      "props": {
        "tag": {
          "type": "string",
          "description": "The tag `n-element` should be rendered as."
        }
      },
      "events": {}
    },
    "n-ellipsis": {
      "description": "Complexity has to live somewhere.\n\nWhen you hear somebody talk about a subtle concept, keep alert.",
      "props": {
        "expand-trigger": {
          "type": "'click'",
          "description": "Abbreviated content trigger event to expand to the full text."
        },
        "line-clamp": {
          "type": "number | string",
          "description": "Maximum lines."
        },
        "tooltip": {
          "type": "boolean | TooltipProps",
          "description": "Tooltip properties."
        }
      },
      "events": {}
    },
    "n-performant-ellipsis": {
      "props": {
        "expand-trigger": {
          "type": "string"
        },
        "line-clamp": {
          "type": "number | string"
        },
        "tooltip": {
          "type": "boolean | object"
        }
      },
      "events": {}
    },
    "n-empty": {
      "description": "E<span style=\"opacity: 0;\">mpt</span>y.",
      "props": {
        "description": {
          "type": "string",
          "description": "Description of the empty."
        },
        "show-description": {
          "type": "boolean",
          "description": "Whether to show description of empty."
        },
        "show-icon": {
          "type": "boolean",
          "description": "Whether to show icon of empty."
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | 'huge'",
          "description": "Empty's size."
        },
        "render-icon": {
          "type": "Function"
        }
      },
      "events": {}
    },
    "n-flex": {
      "description": "Available since `2.37.0`.\n\nFrankly saying, it functions similarly to `n-space`. However use `n-flex` if possible.\n\n`n-flex` utilizes the flex layout, and note that the gap property might have compatibility issues with some older browsers.\n\nOn the other hand, `n-space` involves operations at the `VNode` level, which could lead to rendering issues in certain specific use cases.",
      "props": {
        "align": {
          "type": "string",
          "description": "Way to align items, see [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items)."
        },
        "justify": {
          "type": "string",
          "description": "Way to justify content, see [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content)."
        },
        "inline": {
          "type": "boolean",
          "description": "Whether it's display is `inline-flex`."
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether to layout content vertically."
        },
        "reverse": {
          "type": "boolean"
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | number | [number, number]",
          "description": "When it's a number, it will be used as vertical and horizontal gap, or it is `[horizontalGap, verticalGap]`."
        },
        "wrap": {
          "type": "boolean",
          "description": "Whether to wrap content if `n-flex`'s width is exceeded."
        }
      },
      "events": {}
    },
    "n-form": {
      "description": "<!--single-column-->\n\nThe element to collect and validate data.\n\n<n-alert type=\"warning\" title=\"Caveat\" :bordered=\"false\">\n  If you want to apply required rule for a form item with number typed value, you need to set <n-text code>`type: number`</n-text> in the rule object.\n</n-alert>",
      "props": {
        "inline": {
          "type": "boolean",
          "description": "Whether to display as an inline form."
        },
        "label-width": {
          "type": "number | string | 'auto'",
          "description": "The width of label. Particularly useful when `label-placement` is set to `'left'`,`'auto'` means label width will be auto adjusted."
        },
        "label-align": {
          "type": "'left' | 'right'",
          "description": "Label text alignment."
        },
        "label-placement": {
          "type": "'left' | 'top'",
          "description": "Label placement."
        },
        "model": {
          "type": "Object",
          "description": "The object to get/set form item values."
        },
        "rules": {
          "type": "type FormRules = { [itemValidatePath: string]: FormItemRule | Array<FormItemRule> | FormRules }",
          "description": "The rules to validate form items."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the form."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "show-require-mark": {
          "type": "boolean",
          "description": "Whether to show a required symbol when a form item is required."
        },
        "require-mark-placement": {
          "type": "'left' | 'right' | 'right-hanging'",
          "description": "Require mark placement"
        },
        "show-feedback": {
          "type": "boolean",
          "description": "Whether to show the feedback area."
        },
        "show-label": {
          "type": "boolean",
          "description": "Whether to show the label."
        },
        "validate-messages": {
          "type": "FormValidateMessages",
          "description": "Validation messages of `async-validator`."
        }
      },
      "events": {}
    },
    "n-form-item": {
      "props": {
        "label": {
          "type": "string",
          "description": "Label."
        },
        "label-width": {
          "type": "number | string | 'auto'",
          "description": "If not set, it will inherit the parent form's `label-width`,`'auto'` means label width will be auto adjusted."
        },
        "label-style": {
          "type": "CSSProperties | string",
          "description": "Label style."
        },
        "label-align": {
          "type": "'left' | 'right'",
          "description": "Text alignment inside the label. If not set, it will inherit the parent form's `label-align`."
        },
        "label-placement": {
          "type": "'left' | 'top'",
          "description": "If not set, it will inherit the parent form's `label-placement`."
        },
        "path": {
          "type": "string",
          "description": "The path to use in the parent form's model object."
        },
        "first": {
          "type": "boolean",
          "description": "Whether to only show the first validation error message."
        },
        "rule-path": {
          "type": "string",
          "description": "The path to get rules from the parent form's rule object. If not set, it will use the path of the parent form item instead."
        },
        "required": {
          "type": "boolean",
          "description": "Whether to show the \"required\" symbol. Note: a required rule has higher priority than this prop & this prop **won't** have any effect on validation. Validation still depends on rules."
        },
        "show-require-mark": {
          "type": "boolean",
          "description": "Whether to show required symbol. If not set, it will use `show-require-mark` from the parent form."
        },
        "require-mark-placement": {
          "type": "'left' | 'right' | 'right-hanging'",
          "description": "Require mark placement. If not set, it will use `require-mark-placement` from the parent form."
        },
        "show-feedback": {
          "type": "boolean",
          "description": "Whether to show the feedback area."
        },
        "rule": {
          "type": "FormItemRule | Array<FormItemRule>",
          "description": "The rule to validate this form item. It will be merged with the rules acquired by `rule-path` from the parent form's rules. It's recommended to set all rules on the parent form."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "ignore-path-change": {
          "type": "boolean",
          "description": "Usually, changing `path` will cause a re-render and naive-ui will clear the validation result. Setting `ignore-path-change` to `true` will disable that behavior."
        },
        "validation-status": {
          "type": "'error' | 'success' | 'warning'",
          "description": "The validation status of the form item. If set, it will replace the result of the rule-based validation."
        },
        "feedback": {
          "type": "string",
          "description": "The feedback message of the form item. If set, it will replace any result of rule-based validation."
        },
        "show-label": {
          "type": "boolean",
          "description": "Whether to show a label. If not set, it will inherit `show-label` from the parent form."
        },
        "label-props": {
          "type": "LabelHTMLAttributes",
          "description": "HTML attributes of the label element inside form item."
        }
      },
      "events": {}
    },
    "n-form-item-grid-item": {
      "props": {
        "span": {
          "type": "number | string"
        },
        "offset": {
          "type": "number | string"
        },
        "suffix": {
          "type": "boolean"
        },
        "private-offset": {
          "type": "number"
        },
        "private-span": {
          "type": "number"
        },
        "private-col-start": {
          "type": "number"
        },
        "private-show": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "label-width": {
          "type": "number | string"
        },
        "label-style": {
          "type": "string | object"
        },
        "label-align": {
          "type": "string"
        },
        "label-placement": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "first": {
          "type": "boolean"
        },
        "rule-path": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "show-require-mark": {
          "type": "boolean"
        },
        "require-mark-placement": {
          "type": "string"
        },
        "show-feedback": {
          "type": "boolean"
        },
        "rule": {
          "type": "object | Array"
        },
        "size": {
          "type": "string"
        },
        "ignore-path-change": {
          "type": "boolean"
        },
        "validation-status": {
          "type": "string"
        },
        "feedback": {
          "type": "string"
        },
        "show-label": {
          "type": "boolean"
        },
        "label-props": {
          "type": "object"
        }
      },
      "events": {}
    },
    "n-form-item-gi": {
      "props": {
        "span": {
          "type": "number | string"
        },
        "offset": {
          "type": "number | string"
        },
        "suffix": {
          "type": "boolean"
        },
        "private-offset": {
          "type": "number"
        },
        "private-span": {
          "type": "number"
        },
        "private-col-start": {
          "type": "number"
        },
        "private-show": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "label-width": {
          "type": "number | string"
        },
        "label-style": {
          "type": "string | object"
        },
        "label-align": {
          "type": "string"
        },
        "label-placement": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "first": {
          "type": "boolean"
        },
        "rule-path": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "show-require-mark": {
          "type": "boolean"
        },
        "require-mark-placement": {
          "type": "string"
        },
        "show-feedback": {
          "type": "boolean"
        },
        "rule": {
          "type": "object | Array"
        },
        "size": {
          "type": "string"
        },
        "ignore-path-change": {
          "type": "boolean"
        },
        "validation-status": {
          "type": "string"
        },
        "feedback": {
          "type": "string"
        },
        "show-label": {
          "type": "boolean"
        },
        "label-props": {
          "type": "object"
        }
      },
      "events": {}
    },
    "n-form-item-col": {
      "props": {
        "span": {
          "type": "string | number"
        },
        "push": {
          "type": "string | number"
        },
        "pull": {
          "type": "string | number"
        },
        "offset": {
          "type": "string | number"
        },
        "label": {
          "type": "string"
        },
        "label-width": {
          "type": "number | string"
        },
        "label-style": {
          "type": "string | object"
        },
        "label-align": {
          "type": "string"
        },
        "label-placement": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "first": {
          "type": "boolean"
        },
        "rule-path": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "show-require-mark": {
          "type": "boolean"
        },
        "require-mark-placement": {
          "type": "string"
        },
        "show-feedback": {
          "type": "boolean"
        },
        "rule": {
          "type": "object | Array"
        },
        "size": {
          "type": "string"
        },
        "ignore-path-change": {
          "type": "boolean"
        },
        "validation-status": {
          "type": "string"
        },
        "feedback": {
          "type": "string"
        },
        "show-label": {
          "type": "boolean"
        },
        "label-props": {
          "type": "object"
        }
      },
      "events": {}
    },
    "n-form-item-row": {
      "props": {
        "gutter": {
          "type": "Array | number | string"
        },
        "align-items": {
          "type": "string"
        },
        "justify-content": {
          "type": "string"
        },
        "span": {
          "type": "string | number"
        },
        "push": {
          "type": "string | number"
        },
        "pull": {
          "type": "string | number"
        },
        "offset": {
          "type": "string | number"
        },
        "label": {
          "type": "string"
        },
        "label-width": {
          "type": "number | string"
        },
        "label-style": {
          "type": "string | object"
        },
        "label-align": {
          "type": "string"
        },
        "label-placement": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "first": {
          "type": "boolean"
        },
        "rule-path": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "show-require-mark": {
          "type": "boolean"
        },
        "require-mark-placement": {
          "type": "string"
        },
        "show-feedback": {
          "type": "boolean"
        },
        "rule": {
          "type": "object | Array"
        },
        "size": {
          "type": "string"
        },
        "ignore-path-change": {
          "type": "boolean"
        },
        "validation-status": {
          "type": "string"
        },
        "feedback": {
          "type": "string"
        },
        "show-label": {
          "type": "boolean"
        },
        "label-props": {
          "type": "object"
        }
      },
      "events": {}
    },
    "n-float-button": {
      "props": {
        "width": {
          "type": "number | string"
        },
        "height": {
          "type": "number | string",
          "description": "CSS `height` property of the button group."
        },
        "left": {
          "type": "number | string",
          "description": "CSS `left` property of the button group."
        },
        "right": {
          "type": "number | string",
          "description": "CSS `right` property of the button group."
        },
        "top": {
          "type": "number | string",
          "description": "CSS `top` property of the button group."
        },
        "bottom": {
          "type": "number | string",
          "description": "CSS `bottom` property of the button group."
        },
        "shape": {
          "type": "'circle' | 'square'",
          "description": "Shape of the button."
        },
        "position": {
          "type": "'relative' | 'absolute' | 'fixed'",
          "description": "CSS `position` property of the button group."
        },
        "type": {
          "type": "'default' | 'primary'",
          "description": "Type of the button."
        },
        "menu-trigger": {
          "type": "'click' | 'hover'",
          "description": "Trigger action to show submenu."
        },
        "show-menu": {
          "type": "boolean",
          "description": "Whether submenu of the button is shown."
        }
      },
      "events": {}
    },
    "n-float-button-group": {
      "props": {
        "left": {
          "type": "number | string",
          "description": "CSS `left` property of the button group."
        },
        "right": {
          "type": "number | string",
          "description": "CSS `right` property of the button group."
        },
        "top": {
          "type": "number | string",
          "description": "CSS `top` property of the button group."
        },
        "bottom": {
          "type": "number | string",
          "description": "CSS `bottom` property of the button group."
        },
        "shape": {
          "type": "'circle' | 'square'",
          "description": "Shape of the button group."
        },
        "position": {
          "type": "'relative' | 'absolute' | 'fixed'",
          "description": "CSS `position` property of the button group."
        }
      },
      "events": {}
    },
    "n-global-style": {
      "props": {},
      "events": {}
    },
    "n-gradient-text": {
      "props": {
        "size": {
          "type": "number | string",
          "description": "Text size (when the unit is not specified the default unit will be `px`)."
        },
        "font-size": {
          "type": "string | number"
        },
        "type": {
          "type": "'primary' | 'info' | 'success' | 'warning' | 'error'",
          "description": "Gradient Text type."
        },
        "color": {
          "type": "object | string"
        },
        "gradient": {
          "type": "string | { from: string, to: string, deg: number | string }",
          "description": "Text gradient color parameters."
        }
      },
      "events": {}
    },
    "n-grid": {
      "description": "<!--single-column-->\n\nBased on CSS Grid. Responsive. Keep away from IE.\n\n<n-alert type=\"warning\" title=\"Caveats\" :bordered=\"false\">\nDue to technical limitation, <n-text code>n-grid-item</n-text> can't be encapsulated in another component.\n</n-alert>",
      "props": {
        "layout-shift-disabled": {
          "type": "boolean",
          "description": "By default, `n-grid` will compute grid content based on window size and container size. This would cause 2 side effects: Content may shift in SSR mode; Render items has layout shift and it would influence performance slightly. If you don't need any responsive functionality, you can use `layout-shift-disabled` to get rid of side effects of it. Please note that set `layout-shift-disabled` will disabled all responsive functionality of `n-grid` and `suffix`, `offset` of `n-grid-item`."
        },
        "responsive": {
          "type": "'self' | 'screen'",
          "description": "`'self'` triggers responsive layout by its own width. `'screen'` triggers responsive layout by viewport's width."
        },
        "cols": {
          "type": "number | ResponsiveDescription",
          "description": "Number of grids displayed."
        },
        "item-responsive": {
          "type": "boolean",
          "description": "Whether the grid item is responsive."
        },
        "collapsed": {
          "type": "boolean",
          "description": "Whether to fold by default."
        },
        "collapsed-rows": {
          "type": "number",
          "description": "The number of rows displayed by default."
        },
        "item-style": {
          "type": "object | string"
        },
        "x-gap": {
          "type": "number | ResponsiveDescription",
          "description": "Horizontal gap."
        },
        "y-gap": {
          "type": "number | ResponsiveDescription",
          "description": "Vertical gap."
        }
      },
      "events": {}
    },
    "n-grid-item": {
      "props": {
        "span": {
          "type": "number | ResponsiveDescription",
          "description": "The number of columns occupied by the grid. The grid item would be hidden if it's 0."
        },
        "offset": {
          "type": "number | ResponsiveDescription",
          "description": "The number of intervals to the left of the grid."
        },
        "suffix": {
          "type": "boolean",
          "description": "Grid suffix."
        },
        "private-offset": {
          "type": "number"
        },
        "private-span": {
          "type": "number"
        },
        "private-col-start": {
          "type": "number"
        },
        "private-show": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-gi": {
      "props": {
        "span": {
          "type": "number | ResponsiveDescription",
          "description": "The number of columns occupied by the grid. The grid item would be hidden if it's 0."
        },
        "offset": {
          "type": "number | ResponsiveDescription",
          "description": "The number of intervals to the left of the grid."
        },
        "suffix": {
          "type": "boolean",
          "description": "Grid suffix."
        },
        "private-offset": {
          "type": "number"
        },
        "private-span": {
          "type": "number"
        },
        "private-col-start": {
          "type": "number"
        },
        "private-show": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-icon": {
      "description": "It is recommend to use [xicons](https://www.xicons.org) as your icon library.",
      "props": {
        "depth": {
          "type": "1 | 2 | 3 | 4 | 5",
          "description": "Icon depth."
        },
        "size": {
          "type": "number | string",
          "description": "Icon size (when the unit is not specified the default unit is `px`)."
        },
        "color": {
          "type": "string",
          "description": "Icon color."
        },
        "component": {
          "type": "Component",
          "description": "Icon component to display."
        }
      },
      "events": {}
    },
    "n-icon-wrapper": {
      "props": {
        "size": {
          "type": "number",
          "description": "Size."
        },
        "border-radius": {
          "type": "number",
          "description": "Border radius."
        },
        "color": {
          "type": "string",
          "description": "Color."
        },
        "icon-color": {
          "type": "string",
          "description": "Icon color."
        }
      },
      "events": {}
    },
    "n-image": {
      "description": "Preview it.",
      "props": {
        "alt": {
          "type": "string",
          "description": "Image alt information."
        },
        "height": {
          "type": "string | number",
          "description": "Image height."
        },
        "img-props": {
          "type": "object",
          "description": "The props of the img element inside the component."
        },
        "previewed-img-props": {
          "type": "object",
          "description": "DOM attributes of img element in preview mode."
        },
        "lazy": {
          "type": "boolean",
          "description": "Load image after it enters viewport. When used alone, it will be assigned the property value of [HTMLImageElement.loading](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading). Alternatively, it can be used in conjunction with the `intersection-observer-options` configuration to achieve lazy loading."
        },
        "intersection-observer-options": {
          "type": "{ root?: Element | Document | string | null, rootMargin?: string, threshold?: number | number[]; }",
          "description": "Intersection observer's config to be applied when `lazy=true`."
        },
        "object-fit": {
          "type": "'fill' | 'contain' | 'cover' | 'none' | 'scale-down'",
          "description": "Object-fit type of the image in the container."
        },
        "preview-src": {
          "type": "string",
          "description": "Source of preview image."
        },
        "fallback-src": {
          "type": "string",
          "description": "URL to show when the image fails to load."
        },
        "width": {
          "type": "string | number",
          "description": "Image width."
        },
        "src": {
          "type": "string",
          "description": "Image source."
        },
        "preview-disabled": {
          "type": "boolean",
          "description": "Whether clicking image preview is disabled."
        },
        "load-description": {
          "type": "string"
        },
        "show-toolbar": {
          "type": "boolean",
          "description": "Whether to show the bottom toolbar when the image enlarge."
        },
        "show-toolbar-tooltip": {
          "type": "boolean",
          "description": "Whether to show toolbar buttons' tooltip."
        },
        "2.30.5": {}
      },
      "events": {}
    },
    "n-image-group": {
      "props": {
        "show-toolbar": {
          "type": "boolean",
          "description": "Whether to show the bottom toolbar when the image enlarge."
        },
        "show-toolbar-tooltip": {
          "type": "boolean",
          "description": "Whether to show toolbar buttons' tooltip."
        }
      },
      "events": {}
    },
    "n-input": {
      "description": "Many years ago, inputs were just punched cards.",
      "props": {
        "bordered": {
          "type": "boolean"
        },
        "type": {
          "type": "'text' | 'password' | 'textarea'",
          "description": "Input type."
        },
        "placeholder": {
          "type": "string | [string, string]",
          "description": "Placeholder of input. When `pair` is `true`, this is an array."
        },
        "default-value": {
          "type": "string | [string, string] | null",
          "description": "Default value when not manually set."
        },
        "value": {
          "type": "string | [string, string] | null",
          "description": "Manually set the input value. When `pair` is `true`, this is an array."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the input."
        },
        "size": {
          "type": "'tiny' | 'small' | 'medium' | 'large'",
          "description": "Input size."
        },
        "rows": {
          "type": "number",
          "description": "Rows property for when the input is of type `textarea`."
        },
        "round": {
          "type": "boolean",
          "description": "Use a rounded input style."
        },
        "minlength": {
          "type": "number",
          "description": "Minimum input length."
        },
        "maxlength": {
          "type": "number",
          "description": "Maximum input length."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the input is clearable."
        },
        "autosize": {
          "type": "boolean | { minRows?: number, maxRows?: number }",
          "description": "Sizing property for when the input is of type `textarea`. e.g. `{ minRows: 1, maxRows: 3 }`."
        },
        "pair": {
          "type": "boolean",
          "description": "Whether to use the pairwise type input."
        },
        "separator": {
          "type": "string",
          "description": "The separator between pairwise inputs."
        },
        "readonly": {
          "type": "boolean",
          "description": "Set the readonly state."
        },
        "passively-activated": {
          "type": "boolean",
          "description": "Whether to passively activate the input."
        },
        "show-password-on": {
          "type": "'click' | 'mousedown'",
          "description": "The event to show the password."
        },
        "stateful": {
          "type": "boolean"
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether to autofocus."
        },
        "input-props": {
          "type": "HTMLInputAttributes | TextareaHTMLAttributes",
          "description": "The dom props of the input element inside the component. This is disabled if the `pair` property is true. For avaiable attributes, [see here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). Warning：It won't override internal props with the same name (except `type`)."
        },
        "resizable": {
          "type": "boolean"
        },
        "show-count": {
          "type": "boolean",
          "description": "Whether to show the word count."
        },
        "loading": {
          "type": "boolean",
          "description": "Set loading state. If set (true/false), the element will always take up enough space for the loading indicator."
        },
        "allow-input": {
          "type": "(value: string) => boolean",
          "description": "Check the incoming value, if it returns `false`, input will not be accepted."
        },
        "render-count": {
          "type": "(props: { value: string }) => void",
          "description": "Render function of word count."
        },
        "count-graphemes": {
          "type": "(value: string) => number",
          "description": "Count graphemes of input value. If it's set, native `maxlength` and `minlength` won't be used."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        },
        "text-decoration": {
          "type": "string | Array"
        },
        "attr-size": {
          "type": "number"
        },
        "show-password-toggle": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-input-group": {
      "props": {},
      "events": {}
    },
    "n-input-group-label": {
      "props": {
        "size": {
          "type": "string"
        },
        "bordered": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-input-number": {
      "props": {
        "autofocus": {
          "type": "boolean",
          "description": "Whether to autofocus."
        },
        "loading": {
          "type": "boolean",
          "description": "Set loading state. If set (true/false), the element will always take up enough space for the loading indicator."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder."
        },
        "default-value": {
          "type": "number | null",
          "description": "Default value when not manually set."
        },
        "value": {
          "type": "number | null",
          "description": "Manually set the input value."
        },
        "step": {
          "type": "number",
          "description": "The number which the current value is increased or decreased on key or button press. It can be an integer or a decimal."
        },
        "min": {
          "type": "number",
          "description": "The min value."
        },
        "max": {
          "type": "number",
          "description": "The max value."
        },
        "size": {
          "type": "'tiny' | 'small' | 'medium' | 'large'",
          "description": "The size of input box."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the input."
        },
        "validator": {
          "type": "(value) => boolean",
          "description": "Setup custom validation."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to show a border."
        },
        "show-button": {
          "type": "boolean",
          "description": "Whether to show increase/decrease buttons."
        },
        "button-placement": {
          "type": "'both' | 'right'",
          "description": "Placement of add & minus button."
        },
        "input-props": {
          "type": "HTMLInputAttributes",
          "description": "The dom props of the input element inside the component. For avaiable attributes, [see here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). Warning：It won't override internal props with the same name (except `type`)."
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether it's readonly."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the input is clearable."
        },
        "keyboard": {
          "type": "{ ArrowUp?: boolean, ArrowDown?: boolean }",
          "description": "Control the keyboard behavior. If you set corresponding to false, the keyboard behavior will be disabled."
        },
        "update-value-on-input": {
          "type": "boolean",
          "description": "Whether to change the value on input if the input value is valid."
        },
        "parse": {
          "type": "(input: string) => number | null",
          "description": "Method to parse input string. If it's set, `update-value-on-input` will be disabled."
        },
        "format": {
          "type": "(value: number | null) => string",
          "description": "Method to format value. If it's set, `update-value-on-input` will be disabled."
        },
        "precision": {
          "type": "number",
          "description": "Precision of input value. If it's set, `update-value-on-input` will be disabled."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        }
      },
      "events": {}
    },
    "n-layout": {
      "description": "<!--single-column-->\n\nLayout is for layout.\n\nThe component is a bit complicated to use. But like a manual gear car, it worths a shot.\n\nIf you are use version before v2.3.0, you may want to know about <n-a href=\"#Changes-After-v2.3.0\">Changes After v2.3.0</n-a>.",
      "props": {
        "embedded": {
          "type": "boolean",
          "description": "Use darker background to show a embedded effect. Only work for light theme."
        },
        "position": {
          "type": "'static' | 'absolute'",
          "description": "`static` position will make it css position set to `static`. `absolute` position will make it css position set to `absolute` and `left`, `right`, `top`, `bottom` to `0`. `absolute` position is very useful when you want to make content scroll in a fixed container or make the whole page's layout in a fixed position. You may need to change the style of the component to make it display as you expect."
        },
        "native-scrollbar": {
          "type": "boolean",
          "description": "Whether to use native scrollbar on itself. If set to `false`, layout will use a naive-ui style scrollbar for content."
        },
        "scrollbar-props": {
          "type": "object",
          "description": "See [Scrollbar props](scrollbar#Scrollbar-Props)"
        },
        "content-class": {
          "type": "string",
          "description": "Class of scrollable content node."
        },
        "content-style": {
          "type": "string | Object",
          "description": "Style of scrollable content node."
        },
        "has-sider": {
          "type": "boolean",
          "description": "Whether the component has sider inside. If so it must be `true`."
        },
        "sider-placement": {
          "type": "'left' | 'right'",
          "description": "The sidebar is displayed on the left or the right side."
        }
      },
      "events": {}
    },
    "n-layout-content": {
      "props": {
        "embedded": {
          "type": "boolean"
        },
        "position": {
          "type": "string"
        },
        "native-scrollbar": {
          "type": "boolean"
        },
        "scrollbar-props": {
          "type": "object"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "string | object"
        },
        "has-sider": {
          "type": "boolean"
        },
        "sider-placement": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-layout-header": {
      "props": {
        "position": {
          "type": "string"
        },
        "inverted": {
          "type": "boolean"
        },
        "bordered": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-layout-footer": {
      "props": {
        "inverted": {
          "type": "boolean"
        },
        "position": {
          "type": "string"
        },
        "bordered": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-layout-sider": {
      "props": {
        "position": {
          "type": "string"
        },
        "bordered": {
          "type": "boolean"
        },
        "collapsed-width": {
          "type": "number"
        },
        "width": {
          "type": "number | string"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "string | object"
        },
        "collapse-mode": {
          "type": "string"
        },
        "collapsed": {
          "type": "boolean"
        },
        "default-collapsed": {
          "type": "boolean"
        },
        "show-collapsed-content": {
          "type": "boolean"
        },
        "show-trigger": {
          "type": "boolean | string"
        },
        "native-scrollbar": {
          "type": "boolean"
        },
        "inverted": {
          "type": "boolean"
        },
        "scrollbar-props": {
          "type": "object"
        },
        "trigger-class": {
          "type": "string"
        },
        "trigger-style": {
          "type": "string | object"
        },
        "collapsed-trigger-class": {
          "type": "string"
        },
        "collapsed-trigger-style": {
          "type": "string | object"
        }
      },
      "events": {}
    },
    "n-row": {
      "props": {
        "gutter": {
          "type": "number | string | [number, number] | [string, string]",
          "description": "`horizontal gutter` or `[horizontal gutter, vertical gutter]`"
        },
        "align-items": {
          "type": "string"
        },
        "justify-content": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-col": {
      "props": {
        "span": {
          "type": "number"
        },
        "push": {
          "type": "number"
        },
        "pull": {
          "type": "number"
        },
        "offset": {
          "type": "number"
        }
      },
      "events": {}
    },
    "n-legacy-transfer": {
      "props": {
        "value": {
          "type": "Array"
        },
        "default-value": {
          "type": "Array"
        },
        "options": {
          "type": "Array"
        },
        "disabled": {
          "type": "boolean"
        },
        "virtual-scroll": {
          "type": "boolean"
        },
        "source-title": {
          "type": "string"
        },
        "target-title": {
          "type": "string"
        },
        "filterable": {
          "type": "boolean"
        },
        "source-filter-placeholder": {
          "type": "string"
        },
        "target-filter-placeholder": {
          "type": "string"
        },
        "filter": {
          "type": "Function"
        },
        "size": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-list": {
      "description": "It is hard to make it looks elegant. However things should be done.\n\n<!--single-column-->",
      "props": {
        "size": {
          "type": "string"
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to show the border."
        },
        "clickable": {
          "type": "boolean",
          "description": "Whether item has clickable style."
        },
        "hoverable": {
          "type": "boolean",
          "description": "Whether item has hoverable style."
        },
        "show-divider": {
          "type": "boolean",
          "description": "Whether to show item divider."
        }
      },
      "events": {}
    },
    "n-list-item": {
      "props": {},
      "events": {}
    },
    "n-loading-bar-provider": {
      "props": {
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Mount target of loading bar."
        },
        "container-class": {
          "type": "string",
          "description": "Class of the loading bar container."
        },
        "container-style": {
          "type": "string | object",
          "description": "Style of the loading bar container."
        },
        "loading-bar-style": {
          "type": "{ loading?: string | object, error?: string | object }",
          "description": "Style of the loading bar."
        }
      },
      "events": {}
    },
    "n-log": {
      "description": "<!--single-column-->\n\nIf you have some logs to show, use log.\n\n<n-alert title=\"Note\" type=\"warning\" style=\"margin-bottom: 16px;\" :bordered=\"false\">\n  Due to package size, Naive UI doesn't include highlight.js. If you want highlight logs, make sure you have set highlightjs before using it.\n</n-alert>\n\nIn highlight demo, we defined a language called `naive-log` which will highlight all the numbers of line. The following code shows how we defined it. If you want to know more about highlight.js, see <n-a href=\"https://highlightjs.org/\" target=\"_blank\">highlight.js</n-a> and <n-a href=\"https://highlightjs.readthedocs.io/en/latest/index.html\" target=\"_blank\">highlight.js developer documentation</n-a>\n\n```html\n<template>\n  <n-config-provider :hljs=\"hljs\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import hljs from 'highlight.js/lib/core'\n\n  hljs.registerLanguage('naive-log', () => ({\n    contains: [\n      {\n        className: 'number',\n        begin: /\\d+/\n      }\n    ]\n  }))\n\n  export default defineComponent({\n    setup() {\n      return {\n        hljs\n      }\n    }\n  })\n</script>\n```",
      "props": {
        "loading": {
          "type": "boolean",
          "description": "Whether to show loading."
        },
        "trim": {
          "type": "boolean",
          "description": "Whether to display the log after `trim`."
        },
        "log": {
          "type": "string",
          "description": "The content of the log."
        },
        "font-size": {
          "type": "number",
          "description": "Font size."
        },
        "lines": {
          "type": "Array<string>",
          "description": "Display the log content by line. When the `log` parameter exists at the same time, the parameter is invalid."
        },
        "line-height": {
          "type": "number",
          "description": "Line height."
        },
        "language": {
          "type": "string",
          "description": "The language of the log in `highlightjs`."
        },
        "rows": {
          "type": "number",
          "description": "Log size."
        },
        "offset-top": {
          "type": "number"
        },
        "offset-bottom": {
          "type": "number"
        },
        "hljs": {
          "type": "Object",
          "description": "If you want to set `hljs` locally, pass it using this prop."
        }
      },
      "events": {}
    },
    "n-menu": {
      "description": "<!--single-column-->\n\nNo Food.",
      "props": {
        "options": {
          "type": "Array<MenuOption | MenuDividerOption | MenuGroupOption>",
          "description": "Items data of menu."
        },
        "collapsed": {
          "type": "boolean",
          "description": "The collapsed status of menu, only works when menu is vertical."
        },
        "collapsed-width": {
          "type": "number",
          "description": "The menu width after collapsed."
        },
        "icon-size": {
          "type": "number",
          "description": "The icon size when menu is not collapsed."
        },
        "collapsed-icon-size": {
          "type": "number",
          "description": "The icon size when menu is collapsed. If not set, menu will use `icon-size` in place of it."
        },
        "root-indent": {
          "type": "number",
          "description": "The indent of menu's first level children. If not set, menu will use `indent` in place of it."
        },
        "indent": {
          "type": "number",
          "description": "The indent of menu."
        },
        "label-field": {
          "type": "string",
          "description": "Field name of label."
        },
        "key-field": {
          "type": "string",
          "description": "Field name of key."
        },
        "children-field": {
          "type": "string",
          "description": "Field name of children."
        },
        "disabled-field": {
          "type": "string",
          "description": "Field name of disabled."
        },
        "default-expand-all": {
          "type": "boolean",
          "description": "Whether to expand all menus. When options is set asynchronously, you can set `watch-props` to `['defaultExpandedKeys']` to make it work."
        },
        "default-expanded-keys": {
          "type": "Array<string>",
          "description": "The default expanded submenu keys of menu in uncontrolled manner."
        },
        "expanded-keys": {
          "type": "Array<string>",
          "description": "The expanded submenu keys. If set, menu will work in controlled manner and `default-expanded-names` won't work."
        },
        "value": {
          "type": "string | null",
          "description": "The selected item key of the menu."
        },
        "default-value": {
          "type": "string | null",
          "description": "Whether selected by default in uncontrolled mode."
        },
        "mode": {
          "type": "'vertical' | 'horizontal'",
          "description": "Menu layout."
        },
        "watch-props": {
          "type": "Array<'defaultValue' | 'defaultExpandedKeys'>",
          "description": "Default prop names that needed to be watched. Components will be updated after the prop is changed. Note: the `watch-props` itself is not reactive."
        },
        "disabled": {
          "type": "boolean"
        },
        "show": {
          "type": "boolean"
        },
        "inverted": {
          "type": "boolean",
          "description": "Use inverted style."
        },
        "expand-icon": {
          "type": "(option: MenuOption) => VNodeChild",
          "description": "Render function that renders all expand icon."
        },
        "render-icon": {
          "type": "(option: MenuOption) => VNodeChild",
          "description": "Render function that renders all icons."
        },
        "render-label": {
          "type": "(option: MenuOption | MenuGroupOption) => VNodeChild",
          "description": "Render function that renders all labels."
        },
        "render-extra": {
          "type": "(option: MenuOption | MenuGroupOption) => VNodeChild",
          "description": "Render function that renders all extras."
        },
        "dropdown-props": {
          "type": "DropdownProps",
          "description": "The dropdown's props when menu is collapsed or horizontal mode，please see [Dropdown Props](dropdown#Dropdown-Props)"
        },
        "accordion": {
          "type": "boolean",
          "description": "Whether to use accordion mode."
        },
        "node-props": {
          "type": "(option: MenuOption | MenuGroupOption) => object",
          "description": "Node's DOM attrs generator."
        },
        "dropdown-placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end' |",
          "description": "Only effective in horizontal mode."
        },
        "responsive": {
          "type": "boolean",
          "description": "Whether to collapsed menu items that overflows menu. Only work for menu with `mode='horizontal'`."
        },
        "items": {
          "type": "Array"
        },
        "expanded-names": {
          "type": "Array"
        },
        "default-expanded-names": {
          "type": "Array"
        }
      },
      "events": {}
    },
    "n-mention": {
      "description": "A year ago, my product manager asked me if I could implement this feature. Back then, I recommended just using multiple selects as a workaround.",
      "props": {
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "autosize": {
          "type": "boolean | { maxRows?: number, minRows?: number }",
          "description": "Autosize."
        },
        "options": {
          "type": "MentionOption[]",
          "description": "Mention options list."
        },
        "type": {
          "type": "'text' | 'textarea'",
          "description": "Input type."
        },
        "separator": {
          "type": "string",
          "description": "Character to split mentions. The string length must be exactly 1."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether to display the border of the input element."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the input element."
        },
        "value": {
          "type": "string | null",
          "description": "Manually set input value."
        },
        "default-value": {
          "type": "string",
          "description": "Default value when the value is not manually set."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether the selection panel of mentions is in a loading state."
        },
        "prefix": {
          "type": "string | string[]",
          "description": "Prefix character(s) to trigger mentions. The string length(s) must be exactly 1."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Selection panel's placement ."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Input size."
        },
        "render-label": {
          "type": "(option: MentionOption) => VNodeChild",
          "description": "Options' labels render function."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        }
      },
      "events": {}
    },
    "n-message-provider": {
      "props": {
        "to": {
          "type": "string | HTMLElement",
          "description": "Container node of message container."
        },
        "duration": {
          "type": "number",
          "description": "Default duration of on all messages."
        },
        "keep-alive-on-hover": {
          "type": "boolean",
          "description": "Whether to destroy while hovering on all messages."
        },
        "max": {
          "type": "number",
          "description": "Limit the number of messages to display."
        },
        "placement": {
          "type": "top | top-left | top-right | bottom | bottom-left | bottom-right",
          "description": "Placement of all messages."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether to show close icon on all messages."
        },
        "container-class": {
          "type": "string",
          "description": "Message container class."
        },
        "container-style": {
          "type": "string | CSSProperties",
          "description": "Message container style."
        }
      },
      "events": {}
    },
    "n-modal": {
      "description": "It just pops and shows you something.\n\n<n-alert title=\"Prerequisite\" type=\"warning\" :bordered=\"false\">\n  If you want to create modal using <n-text code>useModal</n-text>, you need to wrap the component where you call related methods inside <n-text code>n-modal-provider</n-text> and use <n-text code>useModal</n-text> to get the API.\n</n-alert>\n\nFor example:\n\n```html\n<!-- App.vue -->\n<n-modal-provider>\n  <content />\n</n-modal-provider>\n```",
      "props": {
        "show": {
          "type": "boolean",
          "description": "Whether to show modal."
        },
        "unstable-show-mask": {
          "type": "boolean"
        },
        "mask-closable": {
          "type": "boolean",
          "description": "Whether to emit `hide` event when click mask."
        },
        "preset": {
          "type": "'dialog' | 'card'",
          "description": "The preset of `n-modal`."
        },
        "to": {
          "type": "string | HTMLElement",
          "description": "Container node of the modal content."
        },
        "display-directive": {
          "type": "'if' | 'show'",
          "description": "Use which directive to control the rendering of modal body."
        },
        "transform-origin": {
          "type": "'mouse' | 'center'",
          "description": "The transform origin of the modal's display animation."
        },
        "z-index": {
          "type": "number",
          "description": "Z index of the modal."
        },
        "auto-focus": {
          "type": "boolean",
          "description": "Whether to focus the first focusable element inside modal."
        },
        "trap-focus": {
          "type": "boolean",
          "description": "Whether to trap focus inside modal."
        },
        "close-on-esc": {
          "type": "boolean",
          "description": "Whether to close modal on Esc is pressed."
        },
        "block-scroll": {
          "type": "boolean",
          "description": "Whether to disabled body scrolling when it's active."
        },
        "title": {
          "type": "string | Function"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        },
        "header-class": {
          "type": "string"
        },
        "header-style": {
          "type": "object | string"
        },
        "header-extra-class": {
          "type": "string"
        },
        "header-extra-style": {
          "type": "object | string"
        },
        "footer-class": {
          "type": "string"
        },
        "footer-style": {
          "type": "object | string"
        },
        "embedded": {
          "type": "boolean"
        },
        "segmented": {
          "type": "boolean | object"
        },
        "size": {
          "type": "string"
        },
        "bordered": {
          "type": "boolean"
        },
        "closable": {
          "type": "boolean"
        },
        "hoverable": {
          "type": "boolean"
        },
        "role": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "icon": {
          "type": "Function"
        },
        "type": {
          "type": "string"
        },
        "negative-text": {
          "type": "string"
        },
        "positive-text": {
          "type": "string"
        },
        "positive-button-props": {
          "type": "object"
        },
        "negative-button-props": {
          "type": "object"
        },
        "content": {
          "type": "string | Function"
        },
        "action": {
          "type": "Function"
        },
        "show-icon": {
          "type": "boolean"
        },
        "loading": {
          "type": "boolean"
        },
        "icon-placement": {
          "type": "string"
        },
        "overlay-style": {
          "type": "string | object"
        }
      },
      "events": {}
    },
    "n-modal-provider": {
      "props": {
        "to": {
          "type": "string | HTMLElement",
          "description": "Container node of the modal content."
        }
      },
      "events": {}
    },
    "n-notification-provider": {
      "props": {
        "container-class": {
          "type": "string",
          "description": "Class of notification container."
        },
        "container-style": {
          "type": "string | Object",
          "description": "Style of notification container."
        },
        "to": {
          "type": "string | HTMLElement",
          "description": "Container node of notification container."
        },
        "scrollable": {
          "type": "boolean",
          "description": "Whether notification can be scroll. Unavailable when `placement` equals `'top'` or `'bottom'`."
        },
        "max": {
          "type": "number",
          "description": "Limit the number of notifications to display."
        },
        "placement": {
          "type": "'top' | 'bottom' |'top-right' | 'top-left' | 'bottom-left' | 'bottom-right'",
          "description": "Placement of all notifications."
        },
        "keep-alive-on-hover": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-page-header": {
      "description": "I hope this component has all the slots you need!",
      "props": {
        "title": {
          "type": "string",
          "description": "Title."
        },
        "subtitle": {
          "type": "string",
          "description": "Subtitle."
        },
        "extra": {
          "type": "string",
          "description": "Extra text information. Is overwritten by the `extra` slot so only use one."
        }
      },
      "events": {}
    },
    "n-pagination": {
      "description": "<!--single-column-->\n\nLong data's friend.",
      "props": {
        "simple": {
          "type": "boolean",
          "description": "Whether to use simple mode."
        },
        "page": {
          "type": "number",
          "description": "Current page in controlled mode."
        },
        "default-page": {
          "type": "number",
          "description": "Current page in uncontrolled mode."
        },
        "item-count": {
          "type": "number",
          "description": "Total number."
        },
        "page-count": {
          "type": "number",
          "description": "Total pages."
        },
        "default-page-count": {
          "type": "number"
        },
        "show-size-picker": {
          "type": "boolean",
          "description": "Whether to show the selector of the number of items per page."
        },
        "page-size": {
          "type": "number",
          "description": "Page size in controlled mode."
        },
        "default-page-size": {
          "type": "number",
          "description": "Page size in uncontrolled mode."
        },
        "page-sizes": {
          "type": "Array<number | PaginationSizeOption>",
          "description": "Number of items per page, can be customize."
        },
        "show-quick-jumper": {
          "type": "boolean",
          "description": "Whether to show quick jump input."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "size of page item."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the pagination."
        },
        "page-slot": {
          "type": "number",
          "description": "The number of pages displayed."
        },
        "select-props": {
          "type": "SelectProps",
          "description": "Page size select's props."
        },
        "prev": {
          "type": "(info: PaginationInfo) => VNodeChild",
          "description": "Previous page."
        },
        "next": {
          "type": "(info: PaginationInfo) => VNodeChild",
          "description": "Next page."
        },
        "goto": {
          "type": "() => VNodeChild",
          "description": "Fast jump content render function."
        },
        "prefix": {
          "type": "(info: PaginationInfo) => VNodeChild",
          "description": "Paging prefix."
        },
        "suffix": {
          "type": "(info: PaginationInfo) => VNodeChild",
          "description": "Page suffix."
        },
        "label": {
          "type": "PaginationRenderLabel",
          "description": "Item content."
        },
        "display-order": {
          "type": "Array<'pages' | 'size-picker' | 'quick-jumper'>",
          "description": "Display order of different parts."
        },
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the pop menu. `false` will keep it not detached."
        },
        "show-quick-jump-dropdown": {
          "type": "boolean",
          "description": "Whether to show quick jump dropdown. If you have too many pages, it could cause performance issue to create quick jump dropdown data. You can set it to `false` to enhance render performance."
        }
      },
      "events": {}
    },
    "n-popconfirm": {
      "description": "A confirm, poped.",
      "props": {
        "show": {
          "type": "boolean"
        },
        "default-show": {
          "type": "boolean"
        },
        "show-arrow": {
          "type": "boolean"
        },
        "trigger": {
          "type": "string"
        },
        "delay": {
          "type": "number"
        },
        "duration": {
          "type": "number"
        },
        "raw": {
          "type": "boolean"
        },
        "placement": {
          "type": "string"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "arrow-point-to-center": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "get-disabled": {
          "type": "Function"
        },
        "display-directive": {
          "type": "string"
        },
        "arrow-class": {
          "type": "string"
        },
        "arrow-style": {
          "type": "string | object"
        },
        "arrow-wrapper-class": {
          "type": "string"
        },
        "arrow-wrapper-style": {
          "type": "string | object"
        },
        "flip": {
          "type": "boolean"
        },
        "animated": {
          "type": "boolean"
        },
        "width": {
          "type": "number | string"
        },
        "overlap": {
          "type": "boolean"
        },
        "keep-alive-on-hover": {
          "type": "boolean"
        },
        "z-index": {
          "type": "number"
        },
        "to": {
          "type": "string | object | boolean"
        },
        "scrollable": {
          "type": "boolean"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        },
        "header-class": {
          "type": "string"
        },
        "header-style": {
          "type": "object | string"
        },
        "footer-class": {
          "type": "string"
        },
        "footer-style": {
          "type": "object | string"
        },
        "arrow": {
          "type": "boolean"
        },
        "min-width": {
          "type": "number"
        },
        "max-width": {
          "type": "number"
        },
        "positive-text": {
          "type": "string | null",
          "description": "Confirm button text."
        },
        "negative-text": {
          "type": "string | null",
          "description": "Cancel button text."
        },
        "show-icon": {
          "type": "boolean",
          "description": "Whether to show icon."
        },
        "positive-button-props": {
          "type": "ButtonProps",
          "description": "Confirm button's DOM props"
        },
        "negative-button-props": {
          "type": "ButtonProps",
          "description": "Cancel button's DOM props"
        }
      },
      "events": {}
    },
    "n-popover": {
      "description": "Pop some hidden message around content. There isn't much builtin styles in popover. It's more up to you to fill the content.\n\nIf you just want to display some basic text message, see [Tooltip](tooltip) instead.",
      "props": {
        "show": {
          "type": "boolean",
          "description": "Whether to show popover."
        },
        "default-show": {
          "type": "boolean"
        },
        "show-arrow": {
          "type": "boolean",
          "description": "Whether to show arrow if set."
        },
        "trigger": {
          "type": "'hover' | 'click' | 'focus' | 'manual'",
          "description": "The popover trigger type."
        },
        "delay": {
          "type": "number",
          "description": "Popover showing delay when trigger is `hover`."
        },
        "duration": {
          "type": "number",
          "description": "Popover vanish delay when trigger is `hover`."
        },
        "raw": {
          "type": "boolean",
          "description": "Whether to use no default styles."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end' |",
          "description": "Popover placement."
        },
        "x": {
          "type": "number",
          "description": "The CSS `left` pixel value when popover manually positioned (x, y need to be set together)."
        },
        "y": {
          "type": "number",
          "description": "The CSS `top` pixel value when popover manually positioned (x, y need to be set together)."
        },
        "arrow-point-to-center": {
          "type": "boolean",
          "description": "Whether the arrow points to center of the trigger element."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the popover can't be activated."
        },
        "get-disabled": {
          "type": "Function"
        },
        "display-directive": {
          "type": "'if' | 'show'",
          "description": "The conditionally render directive to show popover content. `if` means using `v-if` to render content, `show` means using `v-show` to render content."
        },
        "arrow-class": {
          "type": "string",
          "description": "Arrow class of the popover."
        },
        "arrow-style": {
          "type": "string | Object",
          "description": "Arrow style of the popover."
        },
        "arrow-wrapper-class": {
          "type": "string",
          "description": "Arrow class of the popover wrapper."
        },
        "arrow-wrapper-style": {
          "type": "string | Object",
          "description": "Arrow style of the popover wrapper."
        },
        "flip": {
          "type": "boolean",
          "description": "Whether to flip the popover when there is no space for current placement."
        },
        "animated": {
          "type": "boolean",
          "description": "Use animation when popping up."
        },
        "width": {
          "type": "number | 'trigger'",
          "description": "`'trigger'` means popover's width will follow its trigger's width."
        },
        "overlap": {
          "type": "boolean",
          "description": "Overlap trigger element."
        },
        "keep-alive-on-hover": {
          "type": "boolean",
          "description": "Whether to keep popover shown when hover on popover itself with `trigger=\"hover\"`."
        },
        "z-index": {
          "type": "number",
          "description": "The z-index of the popover."
        },
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the popover content. `false` will keep it at trigger container."
        },
        "scrollable": {
          "type": "boolean",
          "description": "Whether the popover's content is scrollable."
        },
        "content-class": {
          "type": "string",
          "description": "Content class of the popover."
        },
        "content-style": {
          "type": "string | Object",
          "description": "Content style of the popover."
        },
        "header-class": {
          "type": "string",
          "description": "Header class of the popover."
        },
        "header-style": {
          "type": "string | Object",
          "description": "Header style of the popover."
        },
        "footer-class": {
          "type": "string",
          "description": "Footer class of the popover."
        },
        "footer-style": {
          "type": "string | Object",
          "description": "Footer style of the popover."
        },
        "arrow": {
          "type": "boolean"
        },
        "min-width": {
          "type": "number"
        },
        "max-width": {
          "type": "number"
        },
        "title": {
          "type": "string",
          "description": "Popover title."
        }
      },
      "events": {}
    },
    "n-popselect": {
      "description": "If you want select some options but don't want a picker, you can use popselect instead.",
      "props": {
        "show": {
          "type": "boolean"
        },
        "default-show": {
          "type": "boolean"
        },
        "trigger": {
          "type": "string"
        },
        "delay": {
          "type": "number"
        },
        "duration": {
          "type": "number"
        },
        "raw": {
          "type": "boolean"
        },
        "placement": {
          "type": "string"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "arrow-point-to-center": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "get-disabled": {
          "type": "Function"
        },
        "display-directive": {
          "type": "string"
        },
        "arrow-class": {
          "type": "string"
        },
        "arrow-style": {
          "type": "string | object"
        },
        "arrow-wrapper-class": {
          "type": "string"
        },
        "arrow-wrapper-style": {
          "type": "string | object"
        },
        "flip": {
          "type": "boolean"
        },
        "animated": {
          "type": "boolean"
        },
        "width": {
          "type": "number | string"
        },
        "overlap": {
          "type": "boolean"
        },
        "keep-alive-on-hover": {
          "type": "boolean"
        },
        "z-index": {
          "type": "number"
        },
        "to": {
          "type": "string | object | boolean"
        },
        "scrollable": {
          "type": "boolean",
          "description": "Whether the select menu is scrollable."
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        },
        "header-class": {
          "type": "string"
        },
        "header-style": {
          "type": "object | string"
        },
        "footer-class": {
          "type": "string"
        },
        "footer-style": {
          "type": "object | string"
        },
        "min-width": {
          "type": "number"
        },
        "max-width": {
          "type": "number"
        },
        "multiple": {
          "type": "boolean",
          "description": "Whether to select multiple values."
        },
        "value": {
          "type": "string | number | Array<string | number> | null",
          "description": "Value in controlled mode."
        },
        "cancelable": {
          "type": "boolean"
        },
        "options": {
          "type": "Array<SelectOption | SelectGroupOption>",
          "description": "For details of configuration options, see [Select](select#SelectOption-Properties)"
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of the Popselect."
        },
        "render-label": {
          "type": "(option: SelectOption | SelectGroupOption) => VNodeChild",
          "description": "Render function of all the options."
        },
        "show-checkmark": {
          "type": "boolean"
        },
        "node-props": {
          "type": "(option: SelectOption | SelectGroupOption) => object",
          "description": "Option's DOM attrs generator."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to enable virtual scrolling."
        }
      },
      "events": {}
    },
    "n-progress": {
      "description": "I have no words to say but there still should be a placeholder to make layout looks spread.",
      "props": {
        "processing": {
          "type": "boolean",
          "description": "Processing status."
        },
        "type": {
          "type": "'line' | 'circle' | 'multiple-circle' | 'dashboard'",
          "description": "Progress type."
        },
        "gap-degree": {
          "type": "number",
          "description": "The gap degree of half circle, 0 ~ 360."
        },
        "gap-offset-degree": {
          "type": "number",
          "description": "The gap offset degree."
        },
        "status": {
          "type": "'default' | 'success' | 'error' | 'warning' | 'info'",
          "description": "Progress status."
        },
        "rail-color": {
          "type": "string | string[]",
          "description": "Rail color."
        },
        "rail-style": {
          "type": "string | CSS | Array<string | CSS>",
          "description": "Rail style."
        },
        "color": {
          "type": "string | string[]",
          "description": "Progress color."
        },
        "view-box-width": {
          "type": "number"
        },
        "stroke-width": {
          "type": "number",
          "description": "Progress width."
        },
        "percentage": {
          "type": "number | number[]",
          "description": "Percentage value."
        },
        "unit": {
          "type": "string",
          "description": "Progress unit."
        },
        "show-indicator": {
          "type": "boolean",
          "description": "Whether to display indicators."
        },
        "indicator-position": {
          "type": "string"
        },
        "indicator-placement": {
          "type": "'inside' | 'outside'",
          "description": "Indicator placement."
        },
        "indicator-text-color": {
          "type": "string",
          "description": "Indicator text color."
        },
        "circle-gap": {
          "type": "number",
          "description": "The gap between circles when type is `'multiple-circle'`, suppose `viewbox` size is `100`."
        },
        "height": {
          "type": "number",
          "description": "`'line'` typed progress's height. Keep default height if not passed."
        },
        "border-radius": {
          "type": "number | string",
          "description": "`'line'` typed progress's border-radius. Keep half of default height if not passed."
        },
        "fill-border-radius": {
          "type": "number | string",
          "description": "`'line'` typed progress's fill's border-radius. Keep `border-radius` if not passed."
        },
        "offset-degree": {
          "type": "number"
        },
        "offset-degress": {
          "type": "number",
          "description": "Offset degree of circular progress, only works with `circle` typed progress."
        }
      },
      "events": {}
    },
    "n-qr-code": {
      "props": {
        "value": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "background-color": {
          "type": "string"
        },
        "icon-src": {
          "type": "string"
        },
        "icon-size": {
          "type": "number"
        },
        "icon-background-color": {
          "type": "string"
        },
        "icon-border-radius": {
          "type": "number"
        },
        "size": {
          "type": "number"
        },
        "padding": {
          "type": "number | string"
        },
        "error-correction-level": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-radio": {
      "description": "<!--single-column-->\n\nWhen I was young, I loved listening to the radio, such as FM 106.8 or FM 92.1.",
      "props": {
        "name": {
          "type": "string",
          "description": "The name attribute of the radio element. If not set, name of `radio-group` will be used."
        },
        "value": {
          "type": "string | number | boolean",
          "description": "Checked value."
        },
        "checked": {
          "type": "boolean",
          "description": "Checked state."
        },
        "default-checked": {
          "type": "boolean",
          "description": "Default checked state."
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        },
        "label": {
          "type": "string",
          "description": "Radio label. If not set, render default slot content, if both, use default slot content first."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "checked-value": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-radio-group": {
      "props": {
        "name": {
          "type": "string",
          "description": "The name attribute of the radio elements inside the group."
        },
        "value": {
          "type": "string | number | boolean | null",
          "description": "Checked value."
        },
        "default-value": {
          "type": "string | number | boolean | null",
          "description": "Default checked value."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        }
      },
      "events": {}
    },
    "n-radio-button": {
      "props": {
        "name": {
          "type": "string",
          "description": "The name attribute of the radio element. If not set, name of `radio-group` will be used."
        },
        "value": {
          "type": "string | number | boolean",
          "description": "Checked value."
        },
        "checked": {
          "type": "boolean",
          "description": "Checked state."
        },
        "default-checked": {
          "type": "boolean",
          "description": "Default checked state."
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        },
        "label": {
          "type": "string",
          "description": "Radio label. If not set, render default slot content, if both, use default slot content first."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "checked-value": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-rate": {
      "description": "Hint: If you are not very confident, think twice before changing the star's color. That can lead to a disaster.",
      "props": {
        "allow-half": {
          "type": "boolean",
          "description": "Allow activating half of the icon."
        },
        "count": {
          "type": "number",
          "description": "Number of icons (max rating)."
        },
        "value": {
          "type": "number | null",
          "description": "Value of activated icons."
        },
        "default-value": {
          "type": "number | null",
          "description": "Default value of activated icons. Before 2.33.0 default value is `null`."
        },
        "readonly": {
          "type": "boolean",
          "description": "Readonly state."
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | number",
          "description": "Icon size."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the rate is clearable. Value will be set to `null` if you click on current value's corresponding icon."
        },
        "color": {
          "type": "string",
          "description": "Activated icon color. This supports the formats: `#FFF`, `#FFFFFF`, `yellow`, `rgb(0, 0, 0)`."
        }
      },
      "events": {}
    },
    "n-result": {
      "description": "Result is for showing result.\n\nMany thanks to [twemoji](https://github.com/twitter/twemoji) for creating those high quality icons.",
      "props": {
        "size": {
          "type": "'small' | 'medium' | 'large' | 'huge'",
          "description": "Size."
        },
        "status": {
          "type": "'info' | 'success' | 'warning' | 'error' | '404' | '403' | '500' | '418'",
          "description": "Status."
        },
        "title": {
          "type": "string",
          "description": "Title."
        },
        "description": {
          "type": "string",
          "description": "Description."
        }
      },
      "events": {}
    },
    "n-scrollbar": {
      "description": "It looks better but I'm sure it's not as reliable as native scrollbar.",
      "props": {
        "trigger": {
          "type": "'hover' | 'none'",
          "description": "Trigger of show scrollbar. `'none'` means always show it."
        },
        "x-scrollable": {
          "type": "boolean",
          "description": "Whether it can scroll horizontally."
        },
        "size": {
          "type": "number",
          "description": "Size of scrollbar."
        }
      },
      "events": {}
    },
    "n-select": {
      "props": {
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "bordered": {
          "type": "boolean"
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the value is clearable."
        },
        "clear-filter-after-select": {
          "type": "boolean",
          "description": "When multiple and filter is true, whether to clear filter keyword after select an option."
        },
        "options": {
          "type": "Array<SelectOption | SelectGroupOption>",
          "description": "Options that can be selected. For more details see SelectOption Properties (below)."
        },
        "default-value": {
          "type": "Array<string | number> | string | number | null",
          "description": "Default value."
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether to allow keyboard control."
        },
        "value": {
          "type": "Array<string | number> | string | number | null",
          "description": "Value when being manually set."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder."
        },
        "menu-props": {
          "type": "HTMLAttributes",
          "description": "The menu's dom props."
        },
        "multiple": {
          "type": "boolean",
          "description": "Whether to allow selecting multiple values."
        },
        "size": {
          "type": "'tiny' | 'small' | 'medium' | 'large'",
          "description": "Size of the select input."
        },
        "filterable": {
          "type": "boolean",
          "description": "Whether options can be filtered."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the select."
        },
        "remote": {
          "type": "boolean",
          "description": "Allows options to be fetched asynchronously. Note that if `remote` is set, `filter` & `tag` won't work on `options`."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether to show a loading state."
        },
        "filter": {
          "type": "(pattern: string, option: Object) => boolean",
          "description": "Filter function."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Option menu's placement."
        },
        "width-mode": {
          "type": "string"
        },
        "tag": {
          "type": "boolean",
          "description": "Whether users can create new options. This should be used with `filterable`."
        },
        "fallback-option": {
          "type": "false | (value: string | number) => SelectOption",
          "description": "The option to be created using the value which has no corresponding option value. If set to `false`, the fallback option won't be created and displayed."
        },
        "show": {
          "type": "boolean",
          "description": "Whether to show/open the option menu."
        },
        "show-arrow": {
          "type": "boolean",
          "description": "Whether to show the dropdown arrow."
        },
        "max-tag-count": {
          "type": "number | 'responsive'",
          "description": "Maximum selected values to display while in `multiple` mode. `responsive` will keep all the tags in single line."
        },
        "ellipsis-tag-popover-props": {
          "type": "PopoverProps",
          "description": "`popover` props of the preview ellipsis tag."
        },
        "consistent-menu-width": {
          "type": "boolean",
          "description": "Whether the menu keeps its width the same as the select trigger element. Setting it to `false` will also disable `virtual-scroll`."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to enable virtual scrolling."
        },
        "label-field": {
          "type": "string",
          "description": "Field name of option label."
        },
        "value-field": {
          "type": "string",
          "description": "Field name of option value."
        },
        "children-field": {
          "type": "string",
          "description": "Field name of group option children."
        },
        "render-label": {
          "type": "(option: SelectOption | SelectGroupOption, selected: boolean) => VNodeChild",
          "description": "Render function for each option label."
        },
        "render-option": {
          "type": "(info: { node: VNode, option: SelectOption | SelectGroupOption, selected: boolean }) => VNodeChild",
          "description": "Render function for each option."
        },
        "render-tag": {
          "type": "(props: { option: SelectBaseOption, handleClose: () => void }) => VNodeChild",
          "description": "Render function for each option tag."
        },
        "input-props": {
          "type": "HTMLInputAttributes",
          "description": "The attributes of input element in the trigger. It only works when the select is filterable."
        },
        "node-props": {
          "type": "(option: SelectOption | SelectGroupOption) => object",
          "description": "Option's DOM attrs generator."
        },
        "ignore-composition": {
          "type": "boolean",
          "description": "Ingore IME's composition status. By default `filter` won't be triggered by input event under compositions."
        },
        "show-on-focus": {
          "type": "boolean",
          "description": "Whether to show menu on focus."
        },
        "display-directive": {
          "type": "string"
        },
        "reset-menu-on-options-change": {
          "type": "boolean",
          "description": "Whether to reset menu staus on options change, for example, scroll status."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        },
        "show-checkmark": {
          "type": "boolean",
          "description": "Whether to show checkmark."
        },
        "items": {
          "type": "Array"
        }
      },
      "events": {}
    },
    "n-skeleton": {
      "description": "A twinkle placeholder.",
      "props": {
        "text": {
          "type": "boolean",
          "description": "Text skeleton."
        },
        "round": {
          "type": "boolean",
          "description": "Round skeleton."
        },
        "circle": {
          "type": "boolean",
          "description": "Circle skeleton."
        },
        "height": {
          "type": "string | number",
          "description": "Skeleton height."
        },
        "width": {
          "type": "string | number",
          "description": "Skeleton width."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Skeleton size."
        },
        "repeat": {
          "type": "string | number",
          "description": "Repeat frequency."
        },
        "animated": {
          "type": "boolean",
          "description": "Whether to enable animation."
        },
        "sharp": {
          "type": "boolean",
          "description": "Whether to display as a right angled skeleton."
        }
      },
      "events": {}
    },
    "n-slider": {
      "description": "As far as I know, it is always used as a volume control.",
      "props": {
        "to": {
          "type": "string | object | boolean"
        },
        "default-value": {
          "type": "number | [number, number] | null",
          "description": "Default value."
        },
        "marks": {
          "type": "{ [markValue: number]: string }",
          "description": "Marks of the slider."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the slider is disabled."
        },
        "format-tooltip": {
          "type": "(value: number) => string | number",
          "description": "Format tooltip."
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether the slider can be controlled keyboard."
        },
        "min": {
          "type": "number",
          "description": "Min value of the slider."
        },
        "max": {
          "type": "number",
          "description": "Max value of the slider."
        },
        "step": {
          "type": "number | 'mark'",
          "description": "Step of the slider."
        },
        "range": {
          "type": "boolean",
          "description": "Whether the slider uses range value."
        },
        "value": {
          "type": "number | [number, number] | null",
          "description": "Value of the slider."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Tooltip's placement"
        },
        "show-tooltip": {
          "type": "boolean",
          "description": "Whether to always show tooltip. Only work with non-range slider."
        },
        "tooltip": {
          "type": "boolean",
          "description": "Whether to show tooltip."
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether to enable vertical mode."
        },
        "reverse": {
          "type": "boolean",
          "description": "Whether to reverse the track."
        }
      },
      "events": {}
    },
    "n-space": {
      "description": "A great invention (which is not invented by me).\n\nIf you don't have compitable issue for `gap` CSS property, it's suggested to use [Flex](flex).",
      "props": {
        "align": {
          "type": "'start' | 'end' | 'center' | 'baseline' | 'stretch'",
          "description": "Vertical arrangement."
        },
        "justify": {
          "type": "'start' | 'end' | 'center' | 'space-around' | 'space-between' | 'space-evenly'",
          "description": "Horizontal arrangement."
        },
        "inline": {
          "type": "boolean",
          "description": "Is it an inline element."
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether to lay out vertically."
        },
        "reverse": {
          "type": "boolean",
          "description": "Whether to reverse inner items."
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | number | [number, number]",
          "description": "When it's a number, it will be used as vertical and horizontal gap, or it is `[horizontalGap, verticalGap]`."
        },
        "wrap-item": {
          "type": "boolean",
          "description": "Whether a container exists to wrap the child elements. `false` value will only work in browsers that supports flex gap."
        },
        "item-class": {
          "type": "string",
          "description": "Node class, valid when `wrap-item` is `true`"
        },
        "item-style": {
          "type": "string | object",
          "description": "Node style, valid when `wrap-item` is `true`"
        },
        "wrap": {
          "type": "boolean",
          "description": "Whether to exceed the line break."
        }
      },
      "events": {}
    },
    "n-spin": {
      "description": "It could've been called `loading`, but why is it called `spin`? Because there is another internal component with less props already named `loading`.",
      "props": {
        "content-class": {
          "type": "string",
          "description": "Content Class of the spin."
        },
        "content-style": {
          "type": "string | Object",
          "description": "Content style of the spin."
        },
        "description": {
          "type": "string",
          "description": "Description of the spin."
        },
        "stroke": {
          "type": "string",
          "description": "Color of the spin."
        },
        "size": {
          "type": "'small' | 'medium' | 'large' | number",
          "description": "Size of the spin."
        },
        "show": {
          "type": "boolean",
          "description": "Specify whether spin is active when spin has content inside. It won't work if you just use spin itself."
        },
        "stroke-width": {
          "type": "number",
          "description": "Relative width of spin's stroke, assuming the outer radius of spin is 100."
        },
        "rotate": {
          "type": "boolean",
          "description": "Specify whether icon rotates, only working for custom icon."
        },
        "spinning": {
          "type": "boolean"
        },
        "delay": {
          "type": "number",
          "description": "Specifies a delay in milliseconds for loading state (prevent flush)."
        }
      },
      "events": {}
    },
    "n-split": {
      "description": "The flexible layout tool provides the possibility of customizing the interface layout.\n\nAvailable since `2.36.0`.",
      "props": {
        "direction": {
          "type": "'horizontal' | 'vertical'",
          "description": "The direction of the split."
        },
        "resize-trigger-size": {
          "type": "number",
          "description": "Size of the resize trigger."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the split."
        },
        "default-size": {
          "type": "number",
          "description": "Default split size, 0~1 is a percentage."
        },
        "size": {
          "type": "number",
          "description": "Split is the controlled split size, with 0~1 representing the percentage."
        },
        "min": {
          "type": "number",
          "description": "The minimum threshold for splitting, 0~1 is a percentage."
        },
        "max": {
          "type": "number",
          "description": "The maximum split threshold, 0~1 is a percentage."
        },
        "watch-props": {
          "type": "Array<'defaultSize'>",
          "description": "Default prop names that needed to be watched. Components will be updated after the prop is changed. Note: the `watch-props` itself is not reactive."
        }
      },
      "events": {}
    },
    "n-statistic": {
      "description": "As simple as it looks.",
      "props": {
        "tabular-nums": {
          "type": "boolean",
          "description": "Whether to make numbers with same width."
        },
        "label": {
          "type": "string",
          "description": "Label of the statistics."
        },
        "value": {
          "type": "string | number",
          "description": "Statistics value."
        }
      },
      "events": {}
    },
    "n-steps": {
      "description": "<!--single-column-->\n\n1, 2, 3... done!",
      "props": {
        "current": {
          "type": "number",
          "description": "Currently active step index."
        },
        "status": {
          "type": "'process' | 'finish' | 'error' | 'wait'",
          "description": "Steps status."
        },
        "size": {
          "type": "'small' | 'medium'",
          "description": "Steps size."
        },
        "vertical": {
          "type": "boolean",
          "description": "Steps vertical."
        }
      },
      "events": {}
    },
    "n-step": {
      "props": {
        "status": {
          "type": "'process' | 'finish' | 'error' | 'wait'",
          "description": "Step status."
        },
        "title": {
          "type": "string",
          "description": "Step title."
        },
        "description": {
          "type": "string",
          "description": "Step description."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether it's clickable."
        }
      },
      "events": {}
    },
    "n-switch": {
      "description": "I have a Nintendo Switch, but don't have time to play it. This reminds me of my childhood when I played NDS... a happier time.",
      "props": {
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "The size of the switch."
        },
        "value": {
          "type": "string | number | boolean | undefined",
          "description": "Value when being set manually."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether to show loading state."
        },
        "default-value": {
          "type": "boolean",
          "description": "Default value."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the switch."
        },
        "round": {
          "type": "boolean",
          "description": "Whether the switch has rounded corners."
        },
        "checked-value": {
          "type": "string | boolean | number",
          "description": "Value of checked state."
        },
        "unchecked-value": {
          "type": "string | boolean | number",
          "description": "Value of checked state."
        },
        "rail-style": {
          "type": "(info: { focused: boolean, checked: boolean }) => (CSSProperties | string)",
          "description": "Rail style generator."
        },
        "rubber-band": {
          "type": "boolean",
          "description": "Whether the switch button has rubber band effect."
        }
      },
      "events": {}
    },
    "n-table": {
      "description": "<!--single-column-->\n\nIf you only want to render some basic tables, use it. If you want to render structured data, see [Data Table](data-table).",
      "props": {
        "bordered": {
          "type": "boolean",
          "description": "Whether to show table border."
        },
        "bottom-bordered": {
          "type": "boolean",
          "description": "The bottom border of the table, this prop is invalid when `bordered` is `true`."
        },
        "single-line": {
          "type": "boolean",
          "description": "Whether columns are not divided. If the prop is `true`, table cell has no `border-right`."
        },
        "striped": {
          "type": "boolean",
          "description": "Whether to show zebra stripes on rows."
        },
        "single-column": {
          "type": "boolean",
          "description": "Whether rows are not divided. If the prop is `true`, table cell has no `border-bottom`."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Table size."
        }
      },
      "events": {}
    },
    "n-th": {
      "props": {},
      "events": {}
    },
    "n-tr": {
      "props": {},
      "events": {}
    },
    "n-td": {
      "props": {},
      "events": {}
    },
    "n-thead": {
      "props": {},
      "events": {}
    },
    "n-tbody": {
      "props": {},
      "events": {}
    },
    "n-tabs": {
      "description": "Switch contents in same area.\n\n<n-alert type=\"warning\" title=\"Note\" :bordered=\"false\">\n  <n-text code>n-tabs</n-text> will extract default tab value from default slot, so there would be a vue slot warning. If you don't want to see the warning, you should give component a  <n-text code>default-value</n-text>.\n</n-alert>",
      "props": {
        "value": {
          "type": "string | number",
          "description": "Value in controlled mode."
        },
        "default-value": {
          "type": "string | number",
          "description": "Default value in uncontrolled mode."
        },
        "trigger": {
          "type": "'click' | 'hover'",
          "description": "Trigger of activating a tab"
        },
        "type": {
          "type": "'bar' | 'line' | 'card' | 'segment'",
          "description": "Tabs type."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether to allow the tag to be closed. Only works when the tag's `type` is `card`."
        },
        "justify-content": {
          "type": "'space-between' | 'space-around' | 'space-evenly' | 'start' | 'center' | 'end'",
          "description": "Justify-content value of `flex` layout. Only works with `'line'` or `'bar'` typed tabs."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of tabs."
        },
        "placement": {
          "type": "'left' | 'right' | 'top' | 'bottom'",
          "description": "Placement of tabs. It won't work with `n-tabs` whose `type` is `'segment'`."
        },
        "tab-style": {
          "type": "string | object",
          "description": "Style of the tab."
        },
        "tab-class": {
          "type": "string",
          "description": "Class of the tab."
        },
        "add-tab-style": {
          "type": "string | object",
          "description": "Style of the add tab."
        },
        "add-tab-class": {
          "type": "string",
          "description": "Class of the add tab."
        },
        "bar-width": {
          "type": "number",
          "description": "The width of the tab bar."
        },
        "pane-class": {
          "type": "string",
          "description": "Class of the pane."
        },
        "pane-style": {
          "type": "string | object",
          "description": "Style of the pane."
        },
        "pane-wrapper-class": {
          "type": "string",
          "description": "Class of the pane warpper."
        },
        "pane-wrapper-style": {
          "type": "string | object",
          "description": "Style of the pane warpper."
        },
        "addable": {
          "type": "boolean | { disabled?: boolean }",
          "description": "Whether to allow add tag. Only works when the tag's `type` is `card`."
        },
        "tabs-padding": {
          "type": "number",
          "description": "Left & right `padding` of the group of tabs."
        },
        "animated": {
          "type": "boolean",
          "description": "Whether to activate tab switching animation. It won't have effect if `placement` is `'left'` or `'right'`."
        },
        "label-size": {
          "type": "string"
        },
        "active-name": {
          "type": "string | number"
        }
      },
      "events": {}
    },
    "n-tab-pane": {
      "props": {
        "tab": {
          "type": "string | VNode | () => VNodeChild",
          "description": "Tab label."
        },
        "name": {
          "type": "string | number",
          "description": "Required, the name of the tab."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the tabs."
        },
        "display-directive": {
          "type": "'if' | 'show' | 'show:lazy'",
          "description": "The directive to use in conditionally rendering. `if` will use `v-if` and `show` will use `v-show`. When use `show` directive, the status of tab won't be reset after tab changes. When use `show:lazy`, the display effect is the same as `show`, but the content will be lazily loaded."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether to allow the tag to be closed. Only works when the tag's `type` is `card`."
        },
        "tab-props": {
          "type": "Object",
          "description": "DOM attributes of tab label."
        },
        "label": {
          "type": "string | number | object | Function"
        }
      },
      "events": {}
    },
    "n-tab": {
      "props": {
        "tab": {
          "type": "string | number | object | Function"
        },
        "name": {
          "type": "string | number",
          "description": "Required, the name of the tab."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether to allow the tag to be closed. Only works when the tag's `type` is `card`."
        },
        "tab-props": {
          "type": "object"
        },
        "label": {
          "type": "string | number | object | Function"
        }
      },
      "events": {}
    },
    "n-tag": {
      "description": "Tags are great for showing attributes; and sometimes toggle options.",
      "props": {
        "color": {
          "type": "{ color?: string, borderColor?: string, textColor?: string }",
          "description": "Color of the tag. Note: this will override the type property's color."
        },
        "type": {
          "type": "'default' | 'primary' | 'info' | 'success' | 'warning' | 'error'",
          "description": "Type of the tag."
        },
        "round": {
          "type": "boolean",
          "description": "Whether the tag has rounded corners."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size of the tag."
        },
        "closable": {
          "type": "boolean",
          "description": "Whether the tag shows a close button."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the tag is disabled."
        },
        "bordered": {
          "type": "boolean",
          "description": "Whether the tag has border."
        },
        "checked": {
          "type": "boolean",
          "description": "Whether the tag is checked. Note: used with `checkable`."
        },
        "checkable": {
          "type": "boolean",
          "description": "Whether the tag is checkable. Note: this nullifies the type property."
        },
        "strong": {
          "type": "boolean",
          "description": "Whether to use strong text"
        },
        "trigger-click-on-close": {
          "type": "boolean",
          "description": "Whether the tag triggers click on close."
        }
      },
      "events": {}
    },
    "n-thing": {
      "description": "When you want to describe a thing, use thing. If you find it doesn't fit you demand, write one by yourself.\n\nI wish there is a way to build all kinds of frequently used layout inside a component. It takes me some time to figure out that the component already exist, the brower itself.",
      "props": {
        "title": {
          "type": "string",
          "description": "Title information."
        },
        "title-extra": {
          "type": "string",
          "description": "Additional information for the title."
        },
        "description": {
          "type": "string",
          "description": "Description information."
        },
        "description-class": {
          "type": "string",
          "description": "Description area class."
        },
        "description-style": {
          "type": "string | Object",
          "description": "Description area style."
        },
        "content": {
          "type": "string",
          "description": "Content area."
        },
        "content-class": {
          "type": "string",
          "description": "Content area class."
        },
        "content-style": {
          "type": "string | Object",
          "description": "Content area style."
        },
        "content-indented": {
          "type": "boolean",
          "description": "Whether to enable content indentation."
        }
      },
      "events": {}
    },
    "n-time": {
      "description": "Time provide some basic formation for time.",
      "props": {
        "time": {
          "type": "number | Date",
          "description": "Time."
        },
        "type": {
          "type": "'relative' | 'date' | 'datetime'",
          "description": "Time type."
        },
        "to": {
          "type": "number | Date",
          "description": "Target time."
        },
        "unix": {
          "type": "boolean",
          "description": "`unix` timestamp."
        },
        "format": {
          "type": "string",
          "description": "Time format. For detail please see [format](https://date-fns.org/v2.23.0/docs/format)."
        },
        "text": {
          "type": "boolean"
        },
        "time-zone": {
          "type": "string",
          "description": "Time zone to be used to format the value. It follows [iana time zones](https://www.iana.org/time-zones). You can use `Intl.supportedValuesOf('timeZone')` to check supported values."
        }
      },
      "events": {}
    },
    "n-time-picker": {
      "props": {
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "bordered": {
          "type": "boolean"
        },
        "actions": {
          "type": "Array<'clear' | 'now' | 'confirm'> | null",
          "description": "Operations supported by the Time Picker."
        },
        "default-value": {
          "type": "number | null",
          "description": "Default value."
        },
        "default-formatted-value": {
          "type": "number | null",
          "description": "Default formatted value."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Time picker panel's placement."
        },
        "value": {
          "type": "number | null",
          "description": "Value when being set manually."
        },
        "format": {
          "type": "string",
          "description": "Time format. For possible formats see [date-fns.org](https://date-fns.org/v2.23.0/docs/format)."
        },
        "value-format": {
          "type": "string",
          "description": "Format of formatted value."
        },
        "formatted-value": {
          "type": "string | null",
          "description": "Formatted value."
        },
        "is-hour-disabled": {
          "type": "(hour: number) => boolean",
          "description": "Callback function for disabling hours."
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "is-minute-disabled": {
          "type": "(minute: number, hour: number | null) => boolean",
          "description": "Callback function for disabling minutes. When value is empty, `hour` is `null`."
        },
        "is-second-disabled": {
          "type": "(second: number, minute: number | null, hour: number | null) => boolean",
          "description": "Callback function for disabling seconds. When value is empty, `hour` and `minute` are `null`."
        },
        "input-readonly": {
          "type": "boolean",
          "description": "Readonly state (does not apply to touch devices)."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the value is clearable."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        },
        "time-zone": {
          "type": "string",
          "description": "Time zone to be used to format the value. It follows [iana time zones](https://www.iana.org/time-zones). You can use `Intl.supportedValuesOf('timeZone')` to check supported values."
        },
        "show-icon": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        },
        "show": {
          "type": "boolean",
          "description": "Whether to show panel"
        },
        "hours": {
          "type": "number | number[]",
          "description": "The array of hours that can be selected. If a number, it'll be converted into an array of numbers using that increment."
        },
        "minutes": {
          "type": "number | number[]",
          "description": "The array of minutes that can be selected. If a number, it'll be converted into an array of numbers using that increment."
        },
        "seconds": {
          "type": "number | number[]",
          "description": "The array of seconds that can be selected. If a number, it'll be converted into an array of numbers using that increment."
        },
        "use-12-hours": {
          "type": "boolean",
          "description": "Whether to use a 12-hour clock panel."
        },
        "stateful": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-timeline": {
      "description": "The world is 2 dimensioned. One of them is time. The Other is event.",
      "props": {
        "horizontal": {
          "type": "boolean",
          "description": "Horizontal"
        },
        "item-placement": {
          "type": "'left' | 'right'",
          "description": "Direction."
        },
        "size": {
          "type": "'medium' | 'large'",
          "description": "Size."
        },
        "icon-size": {
          "type": "number",
          "description": "Size of icon part."
        }
      },
      "events": {}
    },
    "n-timeline-item": {
      "props": {
        "time": {
          "type": "string",
          "description": "Item time."
        },
        "title": {
          "type": "string",
          "description": "Item title."
        },
        "content": {
          "type": "string",
          "description": "Item content."
        },
        "color": {
          "type": "string",
          "description": "Item color."
        },
        "line-type": {
          "type": "'default' | 'dashed'",
          "description": "Line type."
        },
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Item type."
        }
      },
      "events": {}
    },
    "n-tooltip": {
      "description": "It walks like a popover, quacks like a popover but looks a bit different from popover.",
      "props": {
        "show": {
          "type": "boolean"
        },
        "default-show": {
          "type": "boolean"
        },
        "show-arrow": {
          "type": "boolean"
        },
        "trigger": {
          "type": "string"
        },
        "delay": {
          "type": "number"
        },
        "duration": {
          "type": "number"
        },
        "raw": {
          "type": "boolean"
        },
        "placement": {
          "type": "string"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "arrow-point-to-center": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "get-disabled": {
          "type": "Function"
        },
        "display-directive": {
          "type": "string"
        },
        "arrow-class": {
          "type": "string"
        },
        "arrow-style": {
          "type": "string | object"
        },
        "arrow-wrapper-class": {
          "type": "string"
        },
        "arrow-wrapper-style": {
          "type": "string | object"
        },
        "flip": {
          "type": "boolean"
        },
        "animated": {
          "type": "boolean"
        },
        "width": {
          "type": "number | string"
        },
        "overlap": {
          "type": "boolean"
        },
        "keep-alive-on-hover": {
          "type": "boolean"
        },
        "z-index": {
          "type": "number"
        },
        "to": {
          "type": "string | object | boolean"
        },
        "scrollable": {
          "type": "boolean"
        },
        "content-class": {
          "type": "string"
        },
        "content-style": {
          "type": "object | string"
        },
        "header-class": {
          "type": "string"
        },
        "header-style": {
          "type": "object | string"
        },
        "footer-class": {
          "type": "string"
        },
        "footer-style": {
          "type": "object | string"
        },
        "arrow": {
          "type": "boolean"
        },
        "min-width": {
          "type": "number"
        },
        "max-width": {
          "type": "number"
        }
      },
      "events": {}
    },
    "n-transfer": {
      "description": "A more efficient transfer.\n\nIf you want to use original transfer, please refer to [Legacy Transfer](legacy-transfer). Please note that the legacy transfer will be removed in the next major version. It's not recommended to to use it.",
      "props": {
        "value": {
          "type": "Array<string | number> | null",
          "description": "Value when being set manually."
        },
        "default-value": {
          "type": "Array<string | number> | null",
          "description": "Default value."
        },
        "options": {
          "type": "TransferOption[]",
          "description": "For configuration options, see the TransferOption Type below."
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Enable virtual scrolling."
        },
        "source-title": {
          "type": "string",
          "description": "Source items title."
        },
        "select-all-text": {
          "type": "string",
          "description": "Text of select all button."
        },
        "clear-text": {
          "type": "string",
          "description": "Text of clear button."
        },
        "target-title": {
          "type": "string",
          "description": "Target items title."
        },
        "filterable": {
          "type": "boolean"
        },
        "source-filterable": {
          "type": "boolean",
          "description": "The source filterable state."
        },
        "target-filterable": {
          "type": "boolean",
          "description": "The target filterable state."
        },
        "show-selected": {
          "type": "boolean",
          "description": "Whether to show selected options in the source list."
        },
        "source-filter-placeholder": {
          "type": "string",
          "description": "Placeholder for the source items search box."
        },
        "target-filter-placeholder": {
          "type": "string",
          "description": "Placeholder for the target items search box."
        },
        "filter": {
          "type": "(pattern: string, option: TransferOption, from: 'source' | 'target') => boolean",
          "description": "2.32.0, `from` 2.32.2"
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Size."
        },
        "render-source-label": {
          "type": "(props: { option: TransferOption }) => VNodeChild",
          "description": "Customize source label rendering."
        },
        "render-target-label": {
          "type": "(props: { option: TransferOption }) => VNodeChild",
          "description": "Customize target label rendering."
        },
        "render-source-list": {
          "type": "(props: { onCheck: (checkedValueList: Array<string | number>) => void, checkedOptions: TransferOption[], pattern: string }) => VNodeChild",
          "description": "Customize source list rendering."
        },
        "render-target-list": {
          "type": "(props: { onCheck: (checkedValueList: Array<string | number>) => void, checkedOptions: TransferOption[], pattern: string }) => VNodeChild",
          "description": "Customize target list rendering."
        }
      },
      "events": {}
    },
    "n-tree": {
      "description": "To be honest, I'm not good at biology. I can figure out few kinds of trees.\n\nWhat's more, not only biology, I forget balanced tree everytime after I revise it shortly.",
      "props": {
        "accordion": {
          "type": "boolean",
          "description": "Whether to use accrodion expand mode."
        },
        "show-irrelevant-nodes": {
          "type": "boolean",
          "description": "Whether to filter unmached nodes when tree is in filter mode."
        },
        "data": {
          "type": "Array<TreeOption>",
          "description": "The node data of the tree. Reset `data` will cause clearing of some uncontrolled status. If you need to modify data, you'd better make tree work in a controlled manner."
        },
        "expand-on-dragenter": {
          "type": "boolean",
          "description": "Whether to expand nodes after dragenter."
        },
        "expand-on-click": {
          "type": "boolean",
          "description": "Whether to expand or collapse nodes after click."
        },
        "check-on-click": {
          "type": "boolean | ((node: TreeOption) => boolean)",
          "description": "Allow node clicking to trigger check when `checkable` is `true`."
        },
        "cancelable": {
          "type": "boolean",
          "description": "Whether node's select status can be cancelled."
        },
        "checkable": {
          "type": "boolean",
          "description": "Whether to display the selection box."
        },
        "draggable": {
          "type": "boolean",
          "description": "Whether it can be dragged."
        },
        "block-node": {
          "type": "boolean",
          "description": "The node name is spread out in the whole row."
        },
        "block-line": {
          "type": "boolean",
          "description": "Nodes spread out the whole row."
        },
        "show-line": {
          "type": "boolean",
          "description": "Whether to display the connection line."
        },
        "disabled": {
          "type": "boolean"
        },
        "checked-keys": {
          "type": "Array<string | number>",
          "description": "Checked keys of the tree."
        },
        "default-checked-keys": {
          "type": "Array<string | number>",
          "description": "Multiple options selected by default."
        },
        "selected-keys": {
          "type": "Array<string | number>",
          "description": "If set, selected status will work in controlled manner."
        },
        "default-selected-keys": {
          "type": "Array<string | number>",
          "description": "Nodes selected by default."
        },
        "multiple": {
          "type": "boolean",
          "description": "Whether to allow multiple selection of nodes."
        },
        "pattern": {
          "type": "string",
          "description": "What to search by default."
        },
        "cascade": {
          "type": "boolean",
          "description": "Whether to cascade checkboxes."
        },
        "selectable": {
          "type": "boolean",
          "description": "Whether the node can be selected."
        },
        "scrollbar-props": {
          "type": "object",
          "description": "See [Scrollbar props](scrollbar#Scrollbar-Props)"
        },
        "indent": {
          "type": "number"
        },
        "allow-drop": {
          "type": "(info: { dropPosition: DropPosition, node: TreeOption, phase: 'drag' | 'drop' }) => boolean",
          "description": "Whether to allow dropping."
        },
        "animated": {
          "type": "boolean",
          "description": "Whether to show expand animation."
        },
        "checkbox-placement": {
          "type": "'left' | 'right'",
          "description": "Checkbox's placement."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to enable virtual scroll. You need to set proper style height of the tree in advance."
        },
        "watch-props": {
          "type": "Array<'defaultCheckedKeys' | 'defaultSelectedKeys' |'defaultExpandedKeys'>",
          "description": "Default prop names that needed to be watched. Components will be updated after the prop is changed. Note: the `watch-props` itself is not reactive."
        },
        "render-label": {
          "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' label."
        },
        "render-prefix": {
          "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' prefix."
        },
        "render-suffix": {
          "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' suffix."
        },
        "node-props": {
          "type": "(info: { option: TreeOption }) => HTMLAttributes",
          "description": "HTML attributes of node."
        },
        "keyboard": {
          "type": "boolean",
          "description": "Whether to support keyboard operation."
        },
        "get-children": {
          "type": "(option: any) => unknown",
          "description": "Get children of the option."
        },
        "allow-checking-not-loaded": {
          "type": "boolean",
          "description": "Whether to allow cascade checking on not loaded nodes. If you want to use this, you should know the `check-keys` may be incomplete. Also, you should aware about the consistency bewteen naive's checking logic and your backend's checking logic, especially when there are disabled nodes."
        },
        "filter": {
          "type": "(pattern: string, node: TreeOption) => boolean",
          "description": "The function that filter tree nodes based on pattern."
        },
        "default-expand-all": {
          "type": "boolean",
          "description": "Expand all options."
        },
        "expanded-keys": {
          "type": "Array<string | number>",
          "description": "If set, expanded status will work in controlled manner."
        },
        "key-field": {
          "type": "string",
          "description": "The key field in `TreeOption`."
        },
        "label-field": {
          "type": "string",
          "description": "The label field in `TreeOption`."
        },
        "children-field": {
          "type": "string",
          "description": "The children field in `TreeOption`."
        },
        "disabled-field": {
          "type": "string",
          "description": "The disabled field in `TreeOption`."
        },
        "default-expanded-keys": {
          "type": "Array<string | number>",
          "description": "Expanded items by default."
        },
        "indeterminate-keys": {
          "type": "Array<string | number>",
          "description": "Indeterminate keys of the tree."
        },
        "render-switcher-icon": {
          "type": "(props: { option: TreeOption, expanded: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of option switcher icon."
        },
        "override-default-node-click-behavior": {
          "type": "(info: { option: TreeSelectOption }) => 'toggleExpand' | 'toggleSelect' | 'toggleCheck' | 'default' | 'none'",
          "description": "Override default node click behavior."
        },
        "check-strategy": {
          "type": "string",
          "description": "The strategy of setting checked callback's keys argument. `all` means setting all checked node. `parent` means setting all checked parent node of whom all child node are checked. `child` means setting all child node."
        },
        "leaf-only": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-tree-select": {
      "props": {
        "bordered": {
          "type": "boolean"
        },
        "cascade": {
          "type": "boolean",
          "description": "Whether to link the selection of parent and child nodes."
        },
        "checkable": {
          "type": "boolean",
          "description": "Whether to use a checkbox to select values."
        },
        "clearable": {
          "type": "boolean",
          "description": "Whether the selection is clearable."
        },
        "clear-filter-after-select": {
          "type": "boolean",
          "description": "When multiple and filter is true, whether to clear filter keyword after select an option."
        },
        "consistent-menu-width": {
          "type": "boolean",
          "description": "Force the widths of selection input and menu to be equal. \\*This will disable virtual scrolling."
        },
        "default-show": {
          "type": "boolean"
        },
        "default-value": {
          "type": "string | number | Array<string | number> | null",
          "description": "Selected key (or keys when `multiple`) by default."
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state."
        },
        "filterable": {
          "type": "boolean",
          "description": "Whether to show a filter."
        },
        "check-strategy": {
          "type": "string",
          "description": "How to display selected nodes when parents and children are selected."
        },
        "loading": {
          "type": "boolean",
          "description": "Whether it's loading."
        },
        "max-tag-count": {
          "type": "number | 'responsive'",
          "description": "Maximum number of selected options to show before the list is truncated. `'responsive'` will keep all of the selected options in one row."
        },
        "multiple": {
          "type": "boolean",
          "description": "Allow selecting multiple options."
        },
        "show-path": {
          "type": "boolean",
          "description": "Whether to also show the hierarchy of selected nodes in the label."
        },
        "separator": {
          "type": "string",
          "description": "Option value separator."
        },
        "options": {
          "type": "TreeSelectOption[]",
          "description": "Options."
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder."
        },
        "placement": {
          "type": "'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-start' | 'left' | 'left-end'",
          "description": "Tree select menu's placement."
        },
        "show": {
          "type": "boolean"
        },
        "size": {
          "type": "'small' | 'medium' | 'large'",
          "description": "Component size."
        },
        "value": {
          "type": "string | number | Array<string | number> | null>",
          "description": "Selected key (or keys when multiple)."
        },
        "to": {
          "type": "string | HTMLElement | false",
          "description": "Container node of the menu. `false` will keep it not detached."
        },
        "menu-props": {
          "type": "HTMLAttributes",
          "description": "The menu's dom props."
        },
        "virtual-scroll": {
          "type": "boolean",
          "description": "Whether to enable virtual scrolling."
        },
        "status": {
          "type": "'success' | 'warning' | 'error'",
          "description": "Validation status."
        },
        "render-tag": {
          "type": "(props: { option: TreeSelectOption, handleClose: () => void }) => VNodeChild",
          "description": "Render function for each option tag."
        },
        "ellipsis-tag-popover-props": {
          "type": "PopoverProps",
          "description": "`popover` props of the preview ellipsis tag."
        },
        "allow-checking-not-loaded": {
          "type": "boolean",
          "description": "Whether to allow cascade checking on not loaded nodes. If you want to use this, you should know the `value` may be incomplete. Also, you should aware about the consistency bewteen naive's checking logic and your backend's checking logic, especially when there are disabled nodes."
        },
        "filter": {
          "type": "(pattern: string, option: TreeSelectOption) => boolean",
          "description": "Filter function."
        },
        "default-expand-all": {
          "type": "boolean",
          "description": "Expand all nodes by default."
        },
        "expanded-keys": {
          "type": "Array<string | number>",
          "description": "Collection of expanded keys."
        },
        "key-field": {
          "type": "string",
          "description": "The key field used for `TreeSelectOption`."
        },
        "label-field": {
          "type": "string",
          "description": "The label field used for `TreeSelectOption`."
        },
        "children-field": {
          "type": "string",
          "description": "The children property to use for `TreeSelectOption`'s."
        },
        "disabled-field": {
          "type": "string",
          "description": "The disabled field used for `TreeSelectOption`."
        },
        "default-expanded-keys": {
          "type": "Array<string | number>",
          "description": "Expand specific keys by default."
        },
        "indeterminate-keys": {
          "type": "Array<string | number>",
          "description": "Indeterminate keys of the tree."
        },
        "render-switcher-icon": {
          "type": "() => VNodeChild",
          "description": "Render function of option switcher icon."
        },
        "override-default-node-click-behavior": {
          "type": "(info: { option: TreeSelectOption }) => 'toggleExpand' | 'toggleSelect' | 'toggleCheck' | 'default' | 'none'",
          "description": "Override default node click behavior."
        },
        "render-label": {
          "type": "(info: { option: TreeSelectOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' label."
        },
        "render-prefix": {
          "type": "(info: { option: TreeSelectOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' prefix."
        },
        "render-suffix": {
          "type": "(info: { option: TreeSelectOption, checked: boolean, selected: boolean }) => VNodeChild",
          "description": "Render function of all the options' suffix."
        },
        "node-props": {
          "type": "(info: { option: TreeSelectOption }) => HTMLAttributes",
          "description": "HTML attributes of node."
        },
        "watch-props": {
          "type": "Array<'defaultCheckedKeys' | 'defaultSelectedKeys' |'defaultExpandedKeys'>",
          "description": "Default prop names that needed to be watched. Components will be updated after the prop is changed. Note: the `watch-props` itself is not reactive."
        },
        "get-children": {
          "type": "(option: any) => unknown",
          "description": "Get children of the option."
        },
        "leaf-only": {
          "type": "boolean"
        }
      },
      "events": {}
    },
    "n-h1": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-h2": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-h3": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-h4": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-h5": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-h6": {
      "props": {
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Text color style."
        },
        "prefix": {
          "type": "'bar'",
          "description": "Show a bar in front of the heading."
        },
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-a": {
      "props": {},
      "events": {}
    },
    "n-p": {
      "props": {
        "depth": {
          "type": "1 | 2 | 3 | '1' | '2' | '3'",
          "description": "Text depth (shade of text)."
        }
      },
      "events": {}
    },
    "n-blockquote": {
      "props": {
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-hr": {
      "props": {},
      "events": {}
    },
    "n-ul": {
      "props": {
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-ol": {
      "props": {
        "align-text": {
          "type": "boolean",
          "description": "Text alignment."
        }
      },
      "events": {}
    },
    "n-li": {
      "props": {},
      "events": {}
    },
    "n-text": {
      "props": {
        "code": {
          "type": "boolean",
          "description": "Use the `code` tag and style."
        },
        "type": {
          "type": "'default' | 'success' | 'info' | 'warning' | 'error'",
          "description": "Typography type."
        },
        "delete": {
          "type": "boolean",
          "description": "Use the `del` tag and strikethrough style."
        },
        "strong": {
          "type": "boolean",
          "description": "Strong."
        },
        "italic": {
          "type": "boolean",
          "description": "Italic."
        },
        "underline": {
          "type": "boolean",
          "description": "Underline."
        },
        "depth": {
          "type": "1 | 2 | 3 | '1' | '2' | '3'",
          "description": "Text depth (shade of text)."
        },
        "tag": {
          "type": "string",
          "description": "Tag to use. `code` or `delete` properties will override this."
        },
        "as": {
          "type": "string"
        }
      },
      "events": {}
    },
    "n-upload": {
      "description": "If latency didn't matter, I'd just fill trucks with hard disks.",
      "props": {
        "name": {
          "type": "string",
          "description": "The field name for the file(s) in the HTTP request's form data."
        },
        "accept": {
          "type": "string",
          "description": "The accept type of upload. See <n-a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept\" target=\"_blank\">accept</n-a>."
        },
        "action": {
          "type": "string",
          "description": "The URL to submit data to."
        },
        "custom-request": {
          "type": "(options: UploadCustomRequestOptions) => void",
          "description": "Customize upload request. For types, see <n-a href=\"#UploadCustomRequestOptions-Type\">UploadCustomRequestOptions</n-a>"
        },
        "directory": {
          "type": "boolean",
          "description": "Whether to allow directory upload. (In open file dialog only directory can be selected)"
        },
        "directory-dnd": {
          "type": "boolean",
          "description": "Whether to allow directory drag and drop. (If it's not set, it will follow `directory` prop by default.)"
        },
        "method": {
          "type": "string",
          "description": "The HTTP request method."
        },
        "multiple": {
          "type": "boolean",
          "description": "Allow multiple files to be selected."
        },
        "show-file-list": {
          "type": "boolean",
          "description": "Show a file list."
        },
        "data": {
          "type": "Object | ({ file: UploadFileInfo }) => Object",
          "description": "The additional fileds data of HTTP request's form data."
        },
        "headers": {
          "type": "Object | ({ file: UploadFileInfo }) => Object",
          "description": "The additional HTTP Headers of request."
        },
        "with-credentials": {
          "type": "boolean",
          "description": "Any credentials to be sent with the request (e.g. cookie)."
        },
        "response-type": {
          "type": "'' | 'arraybuffer' | 'blob' | 'document' | 'json' | 'text'",
          "description": "Response type of `XMLHttpRequest` used by `n-upload`"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the upload."
        },
        "is-error-state": {
          "type": "(xhr: XMLHttpRequest) => boolean",
          "description": "Check if response is error state."
        },
        "default-upload": {
          "type": "boolean",
          "description": "If file uploaded immediatelly after file is selected."
        },
        "file-list": {
          "type": "Array<UploadFileInfo>",
          "description": "The file list of component. If set, the component will work in controlled manner."
        },
        "file-list-class": {
          "type": "string",
          "description": "The class of file list area"
        },
        "file-list-style": {
          "type": "Object",
          "description": "The style of file list area"
        },
        "default-file-list": {
          "type": "Array<UploadFileInfo>",
          "description": "The default file list in uncontrolled manner."
        },
        "show-cancel-button": {
          "type": "boolean",
          "description": "Show a cancel button (while uploading). Use the `on-remove` callback for this event."
        },
        "show-remove-button": {
          "type": "boolean",
          "description": "Show a remove button (after upload completed). Use the `on-remove` callback for this event."
        },
        "show-download-button": {
          "type": "boolean",
          "description": "Show a download button (after upload is finished)."
        },
        "show-retry-button": {
          "type": "boolean",
          "description": "Show a retry button (for a failed upload)."
        },
        "show-preview-button": {
          "type": "boolean",
          "description": "Show a preview button (when `list-type` is `image-card`). Use the `on-preview` callback for this event."
        },
        "list-type": {
          "type": "string",
          "description": "Built-in styles for file lists, `text`, `image` and `image-card`."
        },
        "should-use-thumbnail-url": {
          "type": "(file: UploadSettledFileInfo) => boolean",
          "description": "A function that determines whether to show thumbnail for the file. It only works when `list-type=\"image\"` or `list-type=\"image-card\"`."
        },
        "create-thumbnail-url": {
          "type": "(file: File | null, fileInfo: UploadSettledFileInfo) => (Promise<string> | string | undefined)",
          "description": "Customize file thumbnails. If `undefined` is returned, the file would use default thumbnail display logic."
        },
        "abstract": {
          "type": "boolean",
          "description": "Whether or not DOM wrapping does not exist. Not supported for `image-card` type."
        },
        "max": {
          "type": "number",
          "description": "Uploaded files limit."
        },
        "show-trigger": {
          "type": "boolean",
          "description": "Show upload trigger."
        },
        "image-group-props": {
          "type": "ImageGroupProps",
          "description": "Props of `n-image` inside upload. See [ImageGroup Props](image#ImageGroup-Props)."
        },
        "input-props": {
          "type": "Object",
          "description": "Attributes of file input."
        },
        "trigger-class": {
          "type": "string",
          "description": "Class of trigger area."
        },
        "trigger-style": {
          "type": "Object | string",
          "description": "Style of trigger area."
        },
        "render-icon": {
          "type": "(file: UploadSettledFileInfo) => VNodeChild",
          "description": "Render function of file icon. It only works when `list-type=\"image\"` or `list-type=\"image-card\"`."
        }
      },
      "events": {}
    },
    "n-upload-dragger": {
      "props": {},
      "events": {}
    },
    "n-upload-trigger": {
      "props": {
        "abstract": {
          "type": "boolean",
          "description": "Whether or not to use the `abstract` mode."
        }
      },
      "events": {}
    },
    "n-upload-file-list": {
      "props": {},
      "events": {}
    },
    "n-virtual-list": {
      "props": {
        "scrollbar-props": {
          "type": "object"
        },
        "items": {
          "type": "Array"
        },
        "item-size": {
          "type": "number"
        },
        "item-resizable": {
          "type": "boolean"
        },
        "items-style": {
          "type": "string | object"
        },
        "visible-items-tag": {
          "type": "string | object"
        },
        "visible-items-props": {
          "type": "object"
        },
        "ignore-item-resize": {
          "type": "boolean"
        },
        "default-scroll-key": {
          "type": "number | string"
        },
        "default-scroll-index": {
          "type": "number"
        },
        "key-field": {
          "type": "string"
        },
        "padding-top": {
          "type": "number | string"
        },
        "padding-bottom": {
          "type": "number | string"
        }
      },
      "events": {}
    },
    "n-watermark": {
      "description": "Watermark.",
      "props": {
        "debug": {
          "type": "boolean",
          "description": "Whether to show debug grid."
        },
        "cross": {
          "type": "boolean",
          "description": "Whether to show watermark at cross position."
        },
        "fullscreen": {
          "type": "boolean",
          "description": "Whether to show fullscreen watermark."
        },
        "width": {
          "type": "number",
          "description": "Width of watermark area."
        },
        "height": {
          "type": "number",
          "description": "Height of watermark area."
        },
        "z-index": {
          "type": "number",
          "description": "Z index of watermark."
        },
        "x-gap": {
          "type": "number",
          "description": "Horizontal gap."
        },
        "y-gap": {
          "type": "number",
          "description": "Vertical gap."
        },
        "y-offset": {
          "type": "number",
          "description": "Vertical offset."
        },
        "x-offset": {
          "type": "number",
          "description": "Horizontal offset."
        },
        "rotate": {
          "type": "number",
          "description": "Rotate degree"
        },
        "image": {
          "type": "string",
          "description": "The URI of watermark image."
        },
        "image-opacity": {
          "type": "number",
          "description": "Image opacity."
        },
        "image-height": {
          "type": "number",
          "description": "Image height."
        },
        "image-width": {
          "type": "number",
          "description": "Image width."
        },
        "content": {
          "type": "string",
          "description": "Content of watermark."
        },
        "selectable": {
          "type": "boolean",
          "description": "Whether content covered by watermark is selectable."
        },
        "font-size": {
          "type": "number",
          "description": "Font size."
        },
        "font-family": {
          "type": "string",
          "description": "Font family."
        },
        "font-style": {
          "type": "` 'normal' | 'italic' | `oblique ${number}deg`  `",
          "description": "Font style."
        },
        "font-variant": {
          "type": "string",
          "description": "Font variant."
        },
        "font-weight": {
          "type": "number",
          "description": "Font weight."
        },
        "font-color": {
          "type": "string",
          "description": "Font color."
        },
        "font-stretch": {
          "type": "string"
        },
        "line-height": {
          "type": "number",
          "description": "Line height."
        },
        "global-rotate": {
          "type": "number",
          "description": "Global rotate degree of the watermark."
        }
      },
      "events": {}
    },
    "n-equation": {
      "description": "No one will think of that a component library should have this component. However a friend of me need this.\n\n<n-alert title=\"Note\" type=\"warning\" style=\"margin-bottom: 16px;\" :bordered=\"false\">\n  Due to package size, Naive UI doesn't include katex. If you want to use Equation, make sure you have setup katex before using it.\n</n-alert>\n\nThe following code shows how to setup katex for Equation.\n\n```html\n<template>\n  <n-config-provider :katex=\"katex\">\n    <my-app />\n  </n-config-provider>\n</template>\n\n<script>\n  import { defineComponent } from 'vue'\n  import katex from 'katex'\n  import 'katex/dist/katex.css'\n\n  export default defineComponent({\n    setup() {\n      return {\n        katex\n      }\n    }\n  })\n</script>\n```",
      "props": {
        "value": {
          "type": "string",
          "description": "Latex expression of the equation."
        },
        "katex": {
          "type": "object",
          "description": "Katex"
        },
        "katex-options": {
          "type": "object",
          "description": "Katex options for the equation."
        }
      },
      "events": {}
    }
  },
  "mb": {
    "mb-icon": {
      "description": "图标组件",
      "props": {
        "icon": {
          "type": "String",
          "description": "图标名称"
        },
        "prefix": {
          "type": "String",
          "default": "mb-icon",
          "description": "图标前缀"
        },
        "size": {
          "type": "String",
          "default": "1em",
          "description": "图标大小"
        },
        "color": {
          "type": "String",
          "default": "currentColor",
          "description": "图标颜色"
        },
        "title": {
          "type": "String",
          "default": "",
          "description": "鼠标悬浮显示标题"
        }
      },
      "events": {}
    },
    "mb-editor-table": {
      "description": "可编辑表格组件",
      "props": {
        "id": {
          "type": "String",
          "default": "",
          "description": "表格唯一标识"
        },
        "props": {
          "type": "Object",
          "default": "{}",
          "description": "表格属性配置"
        },
        "cols": {
          "type": "Array",
          "default": "{}",
          "description": "表格列配置"
        },
        "showNo": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示序号"
        },
        "operation": {
          "type": "Object",
          "default": "{}",
          "description": "操作列配置"
        },
        "operationWidth": {
          "type": "Number",
          "default": 85,
          "description": "操作列宽度"
        },
        "page": {
          "type": "Boolean",
          "default": false,
          "description": "是否分页"
        },
        "rowKey": {
          "type": "String",
          "default": "id",
          "description": "行数据的唯一键"
        },
        "preview": {
          "type": "Boolean",
          "default": false,
          "description": "是否预览模式"
        },
        "rowHoverEdit": {
          "type": "Boolean",
          "default": true,
          "description": "是否开启行悬浮编辑"
        },
        "keepCurrentPage": {
          "type": "Boolean",
          "default": true,
          "description": "是否保持当前页"
        },
        "summary": {
          "type": "Object",
          "default": "undefined",
          "description": "表格合计行配置"
        },
        "onSelectedRow": {
          "type": "Function",
          "default": "{}",
          "description": "选中行回调"
        }
      },
      "events": {}
    },
    "mb-pagination": {
      "description": "分页组件",
      "props": {
        "page": {
          "type": "Number",
          "default": 1,
          "description": "当前页码"
        },
        "pageSize": {
          "type": "Number",
          "default": 10,
          "description": "每页显示条数"
        },
        "itemCount": {
          "type": "Number",
          "default": "undefined",
          "description": "总条数"
        }
      },
      "events": {
        "update-page": {
          "description": "update-page 事件"
        },
        "update-page-size": {
          "description": "update-page-size 事件"
        }
      }
    },
    "mb-radio-dict": {
      "description": "单选字典组件",
      "props": {
        "modelValue": {
          "type": "String|Number",
          "default": "",
          "description": "选中值"
        },
        "dictKey": {
          "type": "String",
          "default": "",
          "description": "字典Key值"
        },
        "isButton": {
          "type": "Boolean",
          "default": false,
          "description": "是否为按钮模式"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        }
      }
    },
    "mb-search": {
      "description": "搜索表单组件",
      "props": {
        "where": {
          "type": "Object",
          "default": "{}",
          "description": "搜索条件对象"
        },
        "notReset": {
          "type": "String",
          "default": "",
          "description": "重置时不清空的字段"
        }
      },
      "events": {
        "search": {
          "description": "点击搜索按钮时触发"
        }
      }
    },
    "mb-table-column": {
      "description": "表格列组件",
      "props": {
        "type": {
          "type": "String",
          "default": "",
          "description": "type 属性"
        },
        "row": {
          "type": "Object",
          "default": "{}",
          "description": "行数据"
        },
        "col": {
          "type": "Object",
          "default": "{}",
          "description": "列数据"
        },
        "index": {
          "type": "Number",
          "default": "undefined",
          "description": "行索引"
        },
        "nowrap": {
          "type": "Boolean",
          "default": "undefined",
          "description": "是否不换行"
        }
      },
      "events": {}
    },
    "mb-table": {
      "description": "表格组件",
      "props": {
        "props": {
          "type": "Object",
          "default": "{}",
          "description": "组件属性配置"
        },
        "id": {
          "type": "String",
          "default": "",
          "description": "表格唯一标识"
        },
        "rowKey": {
          "type": "String",
          "default": "id",
          "description": "行数据的唯一键名"
        },
        "nowrap": {
          "type": "Boolean",
          "default": "undefined",
          "description": "是否不换行"
        },
        "virtualScroll": {
          "type": "Boolean",
          "default": false,
          "description": "是否开启虚拟滚动"
        },
        "url": {
          "type": "String",
          "default": "",
          "description": "远程加载URL"
        },
        "where": {
          "type": "Object",
          "default": "{}",
          "description": "查询条件"
        },
        "cols": {
          "type": "Array",
          "default": "{}",
          "description": "表格列配置"
        },
        "method": {
          "type": "String",
          "default": "post",
          "description": "请求方法"
        },
        "limit": {
          "type": "Number",
          "default": 10,
          "description": "每页显示条数"
        },
        "page": {
          "type": "Boolean",
          "default": true,
          "description": "是否分页"
        },
        "data": {
          "type": "Array",
          "default": "{}",
          "description": "表格数据"
        },
        "done": {
          "type": "Function",
          "default": "{}",
          "description": "数据加载完成回调"
        },
        "loading": {
          "type": "Boolean",
          "default": "{}",
          "description": "是否显示加载中"
        },
        "showNo": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示序号"
        },
        "selection": {
          "type": "Boolean",
          "default": false,
          "description": "是否开启多选"
        },
        "striped": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示斑马纹"
        },
        "selectedRowEnable": {
          "type": "Boolean",
          "default": true,
          "description": "是否可选中行"
        },
        "contextmenuEnable": {
          "type": "Boolean",
          "default": false,
          "description": "是否开启右键菜单"
        },
        "defaultSelectedRow": {
          "type": "Boolean",
          "default": false,
          "description": "是否默认选中第一行"
        },
        "defaultColWidth": {
          "type": "Number",
          "default": 100,
          "description": "默认列宽度"
        },
        "checkedRowKeys": {
          "type": "Array",
          "default": "{}",
          "description": "选中行的keys"
        },
        "keepCurrentPage": {
          "type": "Boolean",
          "default": false,
          "description": "是否保持当前页"
        },
        "summary": {
          "type": "Object",
          "default": "undefined",
          "description": "表格合计行配置"
        },
        "onScroll": {
          "type": "Function",
          "default": "{}",
          "description": "滚动事件回调"
        },
        "onContextmenu": {
          "type": "Function",
          "default": "{}",
          "description": "右键菜单事件回调"
        },
        "onDynamicSettingContextmenu": {
          "type": "Function",
          "default": "{}",
          "description": "onDynamicSettingContextmenu 属性"
        },
        "onContextmenuSelect": {
          "type": "Function",
          "default": "{}",
          "description": "onContextmenuSelect 属性"
        },
        "onDblclick": {
          "type": "Function",
          "default": "{}",
          "description": "onDblclick 属性"
        }
      },
      "events": {
        "update:checked-row-keys": {
          "description": "update:checked-row-keys 事件"
        },
        "selected-row": {
          "description": "selected-row 事件"
        },
        "update:checked-row-datas": {
          "description": "update:checked-row-datas 事件"
        }
      }
    },
    "mb-tree-select": {
      "description": "树形选择组件",
      "props": {
        "modelValue": {
          "type": "String",
          "default": "null",
          "description": "绑定值"
        },
        "url": {
          "type": "String",
          "default": "",
          "description": "数据源URL"
        },
        "itemLabel": {
          "type": "String",
          "description": "选项标签"
        },
        "placeholder": {
          "type": "String",
          "description": "占位提示"
        },
        "props": {
          "type": "Object",
          "description": "组件属性配置"
        },
        "multiple": {
          "type": "Boolean",
          "default": false,
          "description": "是否多选"
        },
        "join": {
          "type": "Boolean",
          "default": true,
          "description": "多选时是否使用逗号拼接"
        },
        "labelField": {
          "type": "String",
          "default": "label",
          "description": "标签字段名"
        },
        "valueField": {
          "type": "String",
          "default": "key",
          "description": "值字段名"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "值变化时触发"
        }
      }
    },
    "mb-tree": {
      "description": "树形组件",
      "props": {
        "url": {
          "type": "String",
          "default": "",
          "description": "url 属性"
        },
        "params": {
          "type": "Object",
          "default": "{}",
          "description": "params 属性"
        },
        "modelValue": {
          "type": "String",
          "default": "",
          "description": "绑定值"
        },
        "style": {
          "type": "String",
          "default": "",
          "description": "style 属性"
        },
        "treeStyle": {
          "type": "Object",
          "default": "{}",
          "description": "treeStyle 属性"
        },
        "props": {
          "type": "Object",
          "default": "{}",
          "description": "组件属性配置"
        },
        "expand": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示展开/折叠按钮"
        },
        "checked": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示复选框"
        },
        "search": {
          "type": "Boolean",
          "default": false,
          "description": "search 属性"
        },
        "searchWidth": {
          "type": "String",
          "default": "230px",
          "description": "searchWidth 属性"
        },
        "keyAll": {
          "type": "Boolean",
          "default": true,
          "description": "keyAll 属性"
        },
        "cascade": {
          "type": "Boolean",
          "default": true,
          "description": "cascade 属性"
        },
        "checkable": {
          "type": "Boolean",
          "default": false,
          "description": "checkable 属性"
        },
        "showLine": {
          "type": "Boolean",
          "default": false,
          "description": "showLine 属性"
        },
        "contextmenu": {
          "type": "Array",
          "default": "undefined",
          "description": "contextmenu 属性"
        },
        "icon": {
          "type": "Object",
          "default": "undefined",
          "description": "icon 属性"
        },
        "defaultExpandAll": {
          "type": "Boolean",
          "default": true,
          "description": "是否默认展开所有节点"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "check-change": {
          "description": "check-change 事件"
        },
        "node-click": {
          "description": "node-click 事件"
        }
      }
    },
    "mb-modal": {
      "description": "模态框组件",
      "props": {
        "title": {
          "type": "String",
          "default": "",
          "description": "标题"
        },
        "width": {
          "type": "String",
          "default": "auto",
          "description": "宽度"
        },
        "height": {
          "type": "String",
          "default": "auto",
          "description": "高度"
        },
        "shadeClose": {
          "type": "Boolean",
          "default": false,
          "description": "是否点击遮罩关闭"
        },
        "shade": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示遮罩"
        },
        "resize": {
          "type": "Boolean",
          "default": true,
          "description": "是否可调整大小"
        },
        "maxmin": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示最大化按钮"
        },
        "shadeOpacity": {
          "type": "String",
          "default": ".4",
          "description": "遮罩透明度"
        },
        "showFooter": {
          "type": "Boolean",
          "default": true,
          "description": "是否显示底部"
        },
        "buttons": {
          "type": "Array",
          "default": "undefined",
          "description": "按钮配置"
        }
      },
      "events": {
        "confirm": {
          "description": "点击确定按钮时触发"
        }
      }
    },
    "mb-table-tooltip": {
      "description": "表格单元格提示组件",
      "props": {
        "nowrap": {
          "type": "Boolean",
          "default": true,
          "description": "是否不换行"
        }
      },
      "events": {}
    },
    "mb-checkbox": {
      "description": "复选框组件",
      "props": {
        "modelValue": {
          "description": "绑定值"
        },
        "type": {
          "type": "String",
          "default": "",
          "description": "选项类型"
        },
        "options": {
          "type": "Array",
          "default": "{}",
          "description": "选项数据"
        },
        "optionsFilter": {
          "type": "Function",
          "default": "undefined",
          "description": "选项过滤函数"
        },
        "url": {
          "type": "String",
          "default": "",
          "description": "远程加载URL"
        },
        "params": {
          "type": "Object",
          "default": "{}",
          "description": "请求参数"
        },
        "labelField": {
          "type": "String",
          "default": "label",
          "description": "标签字段名"
        },
        "valueField": {
          "type": "String",
          "default": "value",
          "description": "值字段名"
        },
        "props": {
          "type": "Object",
          "default": "{}",
          "description": "组件属性配置"
        },
        "join": {
          "type": "Boolean",
          "default": true,
          "description": "多选时是否使用逗号连接"
        },
        "defaultFirstItem": {
          "type": "Boolean",
          "default": false,
          "description": "是否默认选中第一项"
        },
        "done": {
          "type": "Function",
          "default": "{}",
          "description": "数据加载完成回调"
        },
        "multiple": {
          "type": "Boolean",
          "default": true,
          "description": "是否多选"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "change": {
          "description": "change 事件"
        }
      }
    },
    "mb-date": {
      "description": "日期选择组件",
      "props": {
        "modelValue": {
          "type": "String",
          "description": "绑定值"
        },
        "type": {
          "type": "String",
          "default": "date",
          "description": "日期选择类型"
        },
        "placeholder": {
          "type": "String",
          "default": "请选择时间",
          "description": "占位提示"
        },
        "format": {
          "type": "String",
          "default": "",
          "description": "日期格式"
        },
        "startPlaceholder": {
          "type": "String",
          "default": "开始时间",
          "description": "开始日期占位提示"
        },
        "endPlaceholder": {
          "type": "String",
          "default": "结束时间",
          "description": "结束日期占位提示"
        },
        "props": {
          "type": "Object",
          "description": "组件属性配置"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        }
      }
    },
    "mb-input": {
      "description": "输入框组件",
      "props": {
        "modelValue": {
          "type": "String",
          "description": "绑定值"
        },
        "itemLabel": {
          "type": "String",
          "description": "选项标签"
        },
        "placeholder": {
          "type": "String",
          "description": "占位提示"
        },
        "type": {
          "type": "String",
          "description": "输入框类型"
        },
        "props": {
          "type": "Object",
          "description": "组件属性配置"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        }
      }
    },
    "mb-select-table": {
      "description": "表格选择组件",
      "props": {
        "modelValue": {
          "description": "绑定值"
        },
        "width": {
          "type": "Number",
          "default": 500,
          "description": "表格宽度"
        },
        "height": {
          "type": "Number",
          "default": 300,
          "description": "表格高度"
        },
        "tableOptions": {
          "type": "Object",
          "default": "{}",
          "description": "表格配置选项"
        },
        "onSelectData": {
          "type": "Function",
          "default": "{}",
          "description": "选择数据回调"
        },
        "multiple": {
          "type": "Boolean",
          "default": false,
          "description": "是否多选"
        },
        "closeCurrentColEditMode": {
          "type": "Function",
          "default": "undefined",
          "description": "关闭当前列编辑模式回调"
        },
        "search": {
          "type": "Object",
          "default": "undefined",
          "description": "搜索配置"
        }
      },
      "events": {}
    },
    "mb-select": {
      "description": "下拉选择组件",
      "props": {
        "modelValue": {
          "description": "绑定值"
        },
        "type": {
          "type": "String",
          "default": "",
          "description": "选项类型"
        },
        "options": {
          "type": "Array",
          "default": "{}",
          "description": "选项数据"
        },
        "optionsFilter": {
          "type": "Function",
          "default": "undefined",
          "description": "选项过滤函数"
        },
        "url": {
          "type": "String",
          "default": "",
          "description": "远程加载URL"
        },
        "params": {
          "type": "Object",
          "default": "{}",
          "description": "请求参数"
        },
        "labelField": {
          "type": "String",
          "default": "label",
          "description": "标签字段名"
        },
        "valueField": {
          "type": "String",
          "default": "value",
          "description": "值字段名"
        },
        "props": {
          "type": "Object",
          "default": "{}",
          "description": "组件属性配置"
        },
        "width": {
          "type": "String",
          "default": "100%",
          "description": "组件宽度"
        },
        "allOption": {
          "type": "Boolean",
          "default": false,
          "description": "是否显示全部选项"
        },
        "placeholder": {
          "type": "String",
          "default": "",
          "description": "占位提示"
        },
        "itemLabel": {
          "type": "String",
          "description": "选项标签"
        },
        "multiple": {
          "type": "Boolean",
          "default": false,
          "description": "是否多选"
        },
        "join": {
          "type": "Boolean",
          "default": true,
          "description": "多选时是否使用逗号连接"
        },
        "clearable": {
          "type": "Boolean",
          "default": true,
          "description": "是否可清空"
        },
        "showOnFocus": {
          "type": "Boolean",
          "default": true,
          "description": "是否在获得焦点时显示选项"
        },
        "defaultFirstItem": {
          "type": "Boolean",
          "default": false,
          "description": "是否默认选中第一项"
        },
        "done": {
          "type": "Function",
          "default": "{}",
          "description": "数据加载完成回调"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "change": {
          "description": "change 事件"
        }
      }
    },
    "mb-switch": {
      "description": "开关组件",
      "props": {
        "modelValue": {
          "type": "Boolean",
          "description": "绑定值"
        },
        "checkedValue": {
          "type": "Boolean",
          "description": "选中时的值"
        },
        "uncheckedValue": {
          "type": "Boolean",
          "description": "未选中时的值"
        },
        "props": {
          "type": "Object",
          "description": "组件属性配置"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "change": {
          "description": "change 事件"
        }
      }
    },
    "mb-textarea": {
      "description": "文本域组件",
      "props": {
        "modelValue": {
          "type": "String",
          "default": "",
          "description": "绑定值"
        },
        "itemLabel": {
          "type": "String",
          "description": "选项标签"
        },
        "placeholder": {
          "type": "String",
          "description": "占位提示"
        },
        "props": {
          "type": "Object",
          "description": "组件属性配置"
        },
        "rows": {
          "type": "Number",
          "default": 3,
          "description": "文本域行数"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        }
      }
    },
    "mb-upload-file": {
      "description": "文件上传组件",
      "props": {
        "modelValue": {
          "description": "绑定值"
        },
        "multiple": {
          "type": "Boolean",
          "default": false,
          "description": "最大上传数量"
        },
        "limit": {
          "type": "Number",
          "default": 20,
          "description": "最大文件大小"
        },
        "maxFileSize": {
          "type": "Number",
          "default": 200,
          "description": "最大文件大小"
        },
        "accept": {
          "type": "String",
          "default": "",
          "description": "允许的文件类型"
        },
        "externalId": {
          "type": "String",
          "default": "",
          "description": "外部ID"
        },
        "externalType": {
          "type": "String",
          "default": "",
          "description": "外部类型"
        },
        "formats": {
          "type": "String",
          "default": "",
          "description": "文件格式"
        },
        "label": {
          "type": "String",
          "default": "点击上传",
          "description": "上传按钮文字"
        },
        "showTip": {
          "type": "Boolean",
          "default": "{}",
          "description": "是否显示提示"
        },
        "action": {
          "type": "String",
          "default": "",
          "description": "上传地址"
        },
        "showFileList": {
          "type": "Boolean",
          "default": "{}",
          "description": "是否显示文件列表"
        },
        "onSuccess": {
          "type": "Function",
          "default": "{}",
          "description": "上传成功回调"
        },
        "deleteTip": {
          "type": "Boolean",
          "default": "{}",
          "description": "是否显示删除提示"
        },
        "join": {
          "type": "Boolean",
          "default": true,
          "description": "是否合并上传"
        },
        "directoryDnd": {
          "type": "Boolean",
          "default": false,
          "description": "是否支持拖拽上传"
        },
        "defaultUpload": {
          "type": "Boolean",
          "default": true,
          "description": "是否自动上传"
        }
      },
      "events": {
        "change": {
          "description": "change 事件"
        },
        "update:modelValue": {
          "description": "update:modelValue 事件"
        }
      }
    },
    "mb-upload-image": {
      "description": "图片上传组件",
      "props": {
        "modelValue": {
          "description": "绑定值"
        },
        "externalId": {
          "type": "String",
          "default": "",
          "description": "外部ID,用于关联其他数据"
        },
        "externalType": {
          "type": "String",
          "default": "",
          "description": "外部类型,用于标识数据类型"
        },
        "multiple": {
          "type": "Boolean",
          "default": false,
          "description": "是否支持多选"
        },
        "limit": {
          "type": "Number",
          "default": 2,
          "description": "最大上传数量限制"
        },
        "cropperConfig": {
          "type": "Object",
          "default": "{}",
          "description": "图片裁剪配置"
        },
        "width": {
          "type": "Number",
          "default": 100,
          "description": "图片显示宽度"
        },
        "height": {
          "type": "Number",
          "default": 100,
          "description": "图片显示高度"
        },
        "tip": {
          "type": "String",
          "default": "",
          "description": "提示文字"
        },
        "tipColor": {
          "type": "String",
          "default": "",
          "description": "提示文字颜色"
        },
        "deleteTip": {
          "type": "Boolean",
          "default": "{}",
          "description": "是否显示删除提示"
        },
        "join": {
          "type": "Boolean",
          "default": true,
          "description": "多选时是否使用逗号连接"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "change": {
          "description": "change 事件"
        }
      }
    },
    "mb-upload-oss-file": {
      "description": "OSS文件上传组件",
      "props": {
        "modelValue": {
          "type": "String",
          "description": "绑定值"
        },
        "width": {
          "type": "String",
          "description": "组件宽度"
        },
        "height": {
          "type": "String",
          "description": "组件高度"
        },
        "accept": {
          "type": "String",
          "default": "",
          "description": "允许上传的文件类型"
        },
        "formats": {
          "type": "String",
          "default": "",
          "description": "允许上传的文件格式"
        },
        "readonly": {
          "type": "Boolean",
          "default": false,
          "description": "是否只读模式"
        }
      },
      "events": {
        "update:modelValue": {
          "description": "update:modelValue 事件"
        },
        "change": {
          "description": "change 事件"
        }
      }
    },
    "mb-video": {
      "description": "",
      "props": {
        "url": {
          "type": "String",
          "description": "url 属性"
        }
      },
      "events": {}
    },
    "mb-monaco-volar": {
      "description": "",
      "props": {
        "theme": {
          "type": "String",
          "default": "dark'// dark or light",
          "description": "theme 属性"
        },
        "fileName": {
          "type": "String",
          "default": "",
          "description": "fileName 属性"
        },
        "code": {
          "type": "String",
          "default": "",
          "description": "code 属性"
        },
        "oldCode": {
          "type": "String",
          "default": "",
          "description": "oldCode 属性"
        },
        "onSave": {
          "type": "Function",
          "default": "{}",
          "description": "onSave 属性"
        },
        "onDidChangeModelContent": {
          "type": "Function",
          "default": "{}",
          "description": "onDidChangeModelContent 属性"
        },
        "compare": {
          "type": "Boolean",
          "default": false,
          "description": "compare 属性"
        }
      },
      "events": {}
    },
    "mb-vue-init-template": {
      "description": "Vue SFC 初始化模板组件",
      "props": {},
      "events": {}
    },
    "mb-form": {
      "description": "",
      "props": {
        "form": {
          "type": "Object",
          "default": "{}",
          "description": "form 属性"
        },
        "detail": {
          "type": "Object",
          "default": "{}",
          "description": "detail 属性"
        },
        "add": {
          "type": "Object",
          "default": "{}",
          "description": "add 属性"
        },
        "primaryField": {
          "type": "String",
          "default": "id",
          "description": "primaryField 属性"
        }
      },
      "events": {
        "reload": {
          "description": "reload 事件"
        }
      }
    },
    "mb-list": {
      "description": "",
      "props": {
        "search": {
          "type": "Object",
          "default": "{}",
          "description": "search 属性"
        },
        "tools": {
          "type": "Array",
          "default": "{}",
          "description": "tools 属性"
        },
        "table": {
          "type": "Object",
          "default": "{}",
          "description": "table 属性"
        }
      },
      "events": {}
    },
    "mb-workflow-edit": {
      "description": "流程图拖拽绘制组件",
      "props": {
        "processDefinitionId": {
          "type": "String",
          "default": "",
          "description": "Camunda 流程定义ID"
        }
      },
      "events": {}
    }
  }
}